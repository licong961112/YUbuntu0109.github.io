<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎参观小灰灰的网站哟 ヾ(◍°∇°◍)ﾉﾞ ~</title>
  
  <subtitle>It&#39;s founded on March 9, 2019 and the open source address for the blog notes https://github.com/YUbuntu0109/YUbuntu0109.github.io</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yubuntu0109.github.io/"/>
  <updated>2019-11-17T05:13:30.509Z</updated>
  <id>https://yubuntu0109.github.io/</id>
  
  <author>
    <name>黄宇辉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python操作MySQL数据库之基本的CURD</title>
    <link href="https://yubuntu0109.github.io/2019/11/15/Python%E6%93%8D%E4%BD%9CMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E5%9F%BA%E6%9C%AC%E7%9A%84CURD/"/>
    <id>https://yubuntu0109.github.io/2019/11/15/Python操作MySQL数据库之基本的CURD/</id>
    <published>2019-11-15T20:56:04.000Z</published>
    <updated>2019-11-17T05:13:30.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-Python-操作-MySQL-数据库之基本的-CURD"><a href="#学习笔记-Python-操作-MySQL-数据库之基本的-CURD" class="headerlink" title="学习笔记 : Python 操作 MySQL 数据库之基本的 CURD"></a>学习笔记 : Python 操作 MySQL 数据库之基本的 CURD</h2><p><em>🐍 学习完 Python 的基础知识后，当然需要进阶地学习关于 Python 的数据库编程知识啦~ 下面是我写的一个操作 MySQL 数据库的基本增删改查，其对于和我一样初学 Python 的同学来说，非常具有参考与学习价值哟~</em></p><ol><li><p><em>tb_user : 数据库表结构</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">9</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure></li><li><p><em>dbconfig.ini : 存储数据库的配置信息</em></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[DATABASE_CONFIGURATION_INFOS]</span></span><br><span class="line"><span class="attr">host</span> = localhost</span><br><span class="line"><span class="attr">user</span> = root</span><br><span class="line"><span class="attr">password</span> = </span><br><span class="line"><span class="attr">database</span> = </span><br><span class="line"><span class="attr">charset</span> = utf8</span><br></pre></td></tr></table></figure></li><li><p><em>Utils.py : 连接数据库的工具类</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Project name : python-learning</span></span><br><span class="line"><span class="string">Description : A SIMPLE TOOL FOR OPERATING DATABASE</span></span><br><span class="line"><span class="string">Author : 黄宇辉</span></span><br><span class="line"><span class="string">Version : 1.0</span></span><br><span class="line"><span class="string">Website : https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="string">Created on 11/12/2019-9:30 PM</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBUtils</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    get the databse configuration infos from the specified file</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getConnConfig</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            configpar = configparser.ConfigParser()</span><br><span class="line">            configpar.read(<span class="string">"dbconfig.ini"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">            connConfig_items = dict(configpar.items(<span class="string">'DATABASE_CONFIGURATION_INFOS'</span>))</span><br><span class="line">            <span class="keyword">return</span> connConfig_items</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">"CATCH THE EXCEPTION INFO : %s"</span> % e)</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    get the database connection object</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getConnection</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">global</span> connection  <span class="comment"># defined a global connection object</span></span><br><span class="line">            connConfig = DBUtils.getConnConfig()  <span class="comment"># get the database configuration infos</span></span><br><span class="line">            connection = pymysql.connect(host=connConfig.get(<span class="string">'host'</span>),</span><br><span class="line">                                         user=connConfig.get(<span class="string">'user'</span>),</span><br><span class="line">                                         password=connConfig.get(<span class="string">'password'</span>),</span><br><span class="line">                                         database=connConfig.get(<span class="string">'database'</span>),</span><br><span class="line">                                         charset=connConfig.get(<span class="string">'charset'</span>))</span><br><span class="line">            <span class="keyword">return</span> connection</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">"FAIL TO CONNECT TO THE DATABASE : %s"</span> % e)</span><br></pre></td></tr></table></figure></li><li><p><em>CURD.py : 操作数据库的测试类</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Project name : python-learning</span></span><br><span class="line"><span class="string">Description : BASIC CURD ON MYSQL DATABASE</span></span><br><span class="line"><span class="string">Author : 黄宇辉</span></span><br><span class="line"><span class="string">Version : 1.0</span></span><br><span class="line"><span class="string">Website : https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="string">Created on 11/11/2019-10:08 PM</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> Utils <span class="keyword">import</span> DBUtils  <span class="comment"># format : from filename import classname</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CURDTest</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> connection  <span class="comment"># defined a global variable</span></span><br><span class="line">        connection = DBUtils.getConnection()  <span class="comment"># get the database connection</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    select the specified user info by id</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectById</span><span class="params">(cls, userid)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># create the cursor object</span></span><br><span class="line">            <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                <span class="comment"># defined the sql statement</span></span><br><span class="line">                sql = <span class="string">'SELECT id,name,sex,phone FROM tb_user WHERE id = %s'</span></span><br><span class="line">                <span class="comment"># execute the specified sql statement</span></span><br><span class="line">                cursor.execute(sql, [userid])</span><br><span class="line">                <span class="comment"># get the result</span></span><br><span class="line">                row = cursor.fetchone()</span><br><span class="line">                <span class="comment"># ouput the result</span></span><br><span class="line">                <span class="keyword">if</span> row <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    print(<span class="string">'ID:&#123;0&#125; - NAME:&#123;1&#125; - SEX:&#123;2&#125; - PHONE:&#123;3&#125;'</span>.format(row[<span class="number">0</span>], row[<span class="number">1</span>], row[<span class="number">2</span>], row[<span class="number">3</span>]))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">"NOT FOUND THE SPECIFIED USER INFO BY ID : %s"</span> % userid)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># catch the exception about database</span></span><br><span class="line">        <span class="keyword">except</span> pymysql.DatabaseError <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">        <span class="comment"># release the connection resource</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            connection.close()</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    select all of user infos</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectAll</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                sql = <span class="string">'SELECT id,name,sex,phone FROM tb_user'</span></span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                result_set = cursor.fetchall()</span><br><span class="line">                <span class="keyword">for</span> row <span class="keyword">in</span> result_set:</span><br><span class="line">                    print(<span class="string">'ID:&#123;0&#125; - NAME:&#123;1&#125; - SEX:&#123;2&#125; - PHONE:&#123;3&#125;'</span>.format(row[<span class="number">0</span>], row[<span class="number">1</span>], row[<span class="number">2</span>], row[<span class="number">3</span>]))</span><br><span class="line">        <span class="keyword">except</span> pymysql.DatabaseError <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            connection.close()</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    insert the user info</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addUser</span><span class="params">(cls, username, sex, telephone)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                sql = <span class="string">'INSERT INTO tb_user(name,sex,phone) VALUE (%s,%s,%s)'</span></span><br><span class="line">                affectedcount = cursor.execute(sql, (username, sex, telephone))</span><br><span class="line">                print(<span class="string">'inserted successfully and the affected count : %s'</span> % affectedcount)</span><br><span class="line">                connection.commit()</span><br><span class="line">        <span class="keyword">except</span> pymysql.DatabaseError <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            connection.rollback()</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            connection.close()</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    update the user info</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">updateUser</span><span class="params">(cls, username, sex, telephone, userid)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                sql = <span class="string">'UPDATE tb_user SET name = %s, sex = %s, phone = %s WHERE id = %s'</span></span><br><span class="line">                affectedcount = cursor.execute(sql, (username, sex, telephone, userid))</span><br><span class="line">                print(<span class="string">'updated successfully and the affected count : %s'</span> % affectedcount)</span><br><span class="line">                connection.commit()</span><br><span class="line">        <span class="keyword">except</span> pymysql.DatabaseError <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            connection.rollback()</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            connection.close()</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    delete the user info</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delUser</span><span class="params">(cls, userid)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                sql = <span class="string">'DELETE FROM tb_user WHERE id = %s'</span></span><br><span class="line">                affectedcount = cursor.execute(sql, userid)</span><br><span class="line">                print(<span class="string">"deleted successfully and the affected count : %s"</span> % affectedcount)</span><br><span class="line">                connection.commit()</span><br><span class="line">        <span class="keyword">except</span> pymysql.DatabaseError <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            connection.rollback()</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            connection.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">test</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">curd = CURDTest()</span><br><span class="line">curd.selectAll()</span><br><span class="line"><span class="comment"># curd.selectById(userid=1)</span></span><br><span class="line"><span class="comment"># curd.addUser(username='addUser', sex='m', telephone='00000000000')</span></span><br><span class="line"><span class="comment"># curd.updateUser(username='updateUser', sex='f', telephone='11111111111', userid=1)</span></span><br><span class="line"><span class="comment"># curd.delUser(userid=1)</span></span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下所示( 仅供参考 ) :</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ID:1 - NAME:黄宇辉 - SEX:男 - PHONE:11111111111</span><br><span class="line">ID:2 - NAME:燕子 - SEX:女 - PHONE:00000000000</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-Python-操作-MySQL-数据库之基本的-CURD&quot;&gt;&lt;a href=&quot;#学习笔记-Python-操作-MySQL-数据库之基本的-CURD&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : Python 操作 MySQL 数据库
      
    
    </summary>
    
    
      <category term="MySQL" scheme="https://yubuntu0109.github.io/tags/MySQL/"/>
    
      <category term="Python" scheme="https://yubuntu0109.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>hello Python</title>
    <link href="https://yubuntu0109.github.io/2019/11/08/hello-Python/"/>
    <id>https://yubuntu0109.github.io/2019/11/08/hello-Python/</id>
    <published>2019-11-08T19:45:04.000Z</published>
    <updated>2019-11-17T05:13:30.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-hello-Python"><a href="#学习笔记-hello-Python" class="headerlink" title="学习笔记 : hello Python"></a>学习笔记 : hello Python</h2><h3 id="Python-简介"><a href="#Python-简介" class="headerlink" title="Python 简介"></a>Python 简介</h3><p><em>Python ( 英国发音：<code>/ˈpaɪθən/</code>，美国发音：<code>/ˈpaɪθɑːn/</code> )，是一种面向对象的解释型计算机程序设计语言，由荷兰人 GuidovanRossum 于 1989 年发明，第一个公开发行版发行于 1991 年</em></p><p><em>Python 是纯粹的自由软件，源代码和解释器 CPython 遵循 GPL( GNUGeneralPublicLicense )协议. Python语法简洁清晰，特色之一是强制用空白符( whitespace )作为语句缩进</em></p><h3 id="Python-的应用"><a href="#Python-的应用" class="headerlink" title="Python 的应用"></a>Python 的应用</h3><ul><li>系统编程</li><li>图形处理</li><li>数学处理</li><li>文本处理</li><li>数据库编程</li><li>网络编程</li><li>Web编程</li><li>多媒体应用</li><li>pymo引擎</li><li>黑客编程</li></ul><h3 id="Python-的应用领域"><a href="#Python-的应用领域" class="headerlink" title="Python 的应用领域"></a>Python 的应用领域</h3><ul><li>Web 应用开发</li><li>操作系统管理，服务器运维的自动化脚本</li><li>科学计算</li><li>桌面软件</li><li>服务器软件( 网络软件 )</li><li>游戏</li><li>构思实现，产品早期原型迭代</li></ul><h3 id="Python-的应用方向"><a href="#Python-的应用方向" class="headerlink" title="Python 的应用方向"></a>Python 的应用方向</h3><ul><li>常规软件开发</li><li>科学计算</li><li>自动化运维</li><li>云计算</li><li>WEB开发</li><li>网络爬虫</li><li>数据分析</li><li>人工智能</li></ul><h3 id="Python-程序的执行原理"><a href="#Python-程序的执行原理" class="headerlink" title="Python 程序的执行原理"></a>Python 程序的执行原理</h3><p><em>Python 不同于类似 C/C++ 之类的编译性语言，其不需要编译成二进制代码，它可以直接从源代码运行程序. 既 Python 解释器先会将源代码转换为字节码( 并非二进制机器码，其需要进一步编译才能够被机器识别. 如果 Python 进程在机器上拥有写入权限，那么它将把程序的字节码保存为一个以<code>.pyc</code>为扩展名的文件 )，然后再把编译好的字节码转发到 Python 虚拟机( PVM )中进行执行.</em></p><h3 id="实现一个简单的学生管理系统"><a href="#实现一个简单的学生管理系统" class="headerlink" title="实现一个简单的学生管理系统"></a>实现一个简单的学生管理系统</h3><p><em>早上在图书馆花了<code>2</code>个小时左右时间看完了 <code>《Python 快速编程入门》</code> 书籍的前六章，毕竟我是有编程基础的嘿嘿，况且编程语言之间是相通的. 为了熟悉 Python 函数的基本使用，晚上回到寝室写了一个简单的学生管理系统，相比 <code>hello world implemented by Python</code> 程序是不是有点急啦哈哈哈~ 代码如下所示 :</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Project name : python-learning</span></span><br><span class="line"><span class="string">Description : A SIMPLE STUDENT MANAGEMENT SYSTEM</span></span><br><span class="line"><span class="string">Author : 黄宇辉</span></span><br><span class="line"><span class="string">Version : 1.0</span></span><br><span class="line"><span class="string">Website : https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="string">Created on 11/8/2019-6:47 PM</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CREATE A LIST WHICH BE USED TO STORE ALL OF STUDENT INFORMATIONS</span></span><br><span class="line">student_infos = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># OUTPUT THE MENU INFO INTO THE CONSOLE</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_menu</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"="</span> * <span class="number">50</span>)</span><br><span class="line">    print(<span class="string">"### A SIMPLE STUDENT MANAGEMENT SYSTEM v1.0 ###"</span>)</span><br><span class="line">    print(<span class="string">"1:ADD THE STUDENT INFORMATION"</span>)</span><br><span class="line">    print(<span class="string">"2:DELETE THE STUDENT INFORMATION"</span>)</span><br><span class="line">    print(<span class="string">"3:MODIFY THE STUDENT INFORMATION"</span>)</span><br><span class="line">    print(<span class="string">"4:DISPLAY ALL OF STUDENT INFORMATIONS"</span>)</span><br><span class="line">    print(<span class="string">"5:SAVE ALL OF STUDENT INFORMATIONS"</span>)</span><br><span class="line">    print(<span class="string">"0:EXIT"</span>)</span><br><span class="line">    print(<span class="string">"="</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ADD A NEW STUDENT INFORMATION</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_info</span><span class="params">()</span>:</span></span><br><span class="line">    new_name = input(<span class="string">"PLEASE ENTER THE NEW STUDENT'S NAME: "</span>)</span><br><span class="line">    new_sex = input(<span class="string">"PLEASE ENTER THE NEW STUDENT'S SEX: "</span>)</span><br><span class="line">    new_phone = input(<span class="string">"PLEASE ENTER THE NEW STUDENT'S PHONE: "</span>)</span><br><span class="line">    new_info = &#123;<span class="string">'name'</span>: new_name, <span class="string">'sex'</span>: new_sex, <span class="string">'phone'</span>: new_phone&#125;</span><br><span class="line">    student_infos.append(new_info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># DELETE THE SPECIFIED STUDENT INFORMATION BY NO</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_info</span><span class="params">()</span>:</span></span><br><span class="line">    del_number = int(input(<span class="string">"PLEASE THE SPECIFIED STUDENT' NO: "</span>)) - <span class="number">1</span>  <span class="comment"># index</span></span><br><span class="line">    <span class="keyword">del</span> student_infos[del_number]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># MODIFY THE SPECIFIED STUDENT INFORMATION BY NO</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify_info</span><span class="params">()</span>:</span></span><br><span class="line">    student_id = int(input(<span class="string">"PLEASE THE STUDENT NO: "</span>))</span><br><span class="line">    new_student_name = input(<span class="string">"PLEASE ENTER THE NEW NAME: "</span>)</span><br><span class="line">    new_student_sex = input(<span class="string">"PLEASE ENTER THE NEW SEX: "</span>)</span><br><span class="line">    new_student_phone = input(<span class="string">"PLEASE ENTER THE NEW PHONE: "</span>)</span><br><span class="line">    student_infos[student_id - <span class="number">1</span>][<span class="string">'name'</span>] = new_student_name</span><br><span class="line">    student_infos[student_id - <span class="number">1</span>][<span class="string">'sex'</span>] = new_student_sex</span><br><span class="line">    student_infos[student_id - <span class="number">1</span>][<span class="string">'phone'</span>] = new_student_phone</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># DISPLAY ALL OF STUDENT INFORMATIONS</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_infos</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"="</span> * <span class="number">50</span>)</span><br><span class="line">    print(<span class="string">"ALL OF STUDENT INFORMATION BE SHOWED AS FOLLOW"</span>)</span><br><span class="line">    print(<span class="string">"="</span> * <span class="number">50</span>)</span><br><span class="line">    print(<span class="string">"NO       NAME        SEX     PHONE"</span>)</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> temp <span class="keyword">in</span> student_infos:</span><br><span class="line">        print(<span class="string">"%d       %s      %s      %s"</span> % (i, temp[<span class="string">'name'</span>], temp[<span class="string">'sex'</span>], temp[<span class="string">'phone'</span>]))</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># SAVE ALL OF STUDENT INFORMATIONS</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        file = open(<span class="string">"db.data"</span>, <span class="string">"w"</span>)</span><br><span class="line">        file.write(str(student_infos))</span><br><span class="line">        file.close()</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        print(<span class="string">"CATCH THE EXCEPTION: THE SPECIFIED FILE NOT EXIST!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># so simple and so cool than Java</span></span><br><span class="line">        print(<span class="string">"SAVE ALL OF STUDENT INFORMATIONS SUCCESSFULLY"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># RECOVER ALL OF STUDENT INFORMATIONS</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recover_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> student_infos</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        file = open(<span class="string">"db.data"</span>, <span class="string">"wb+"</span>)  <span class="comment"># create new file if the specified file not exist</span></span><br><span class="line">        content = file.read()</span><br><span class="line">        print(content)  <span class="comment"># throw the SyntaxError possibly: unexpected EOF while parsing</span></span><br><span class="line">        student_infos = eval(content)</span><br><span class="line">        file.close()</span><br><span class="line">    <span class="keyword">except</span> (SyntaxError, FileNotFoundError) <span class="keyword">as</span> exception_info:</span><br><span class="line">        print(<span class="string">"CATCH THE EXCEPTION: %s"</span> % exception_info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># MAIN FUNCTION</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    recover_data()  <span class="comment"># the specified file must store some datas before reading</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print_menu()</span><br><span class="line">        key = input(<span class="string">"PLEASE ENTER THE SPECIFIED NO OF MENU: "</span>)</span><br><span class="line">        <span class="keyword">if</span> key == <span class="string">'1'</span>:</span><br><span class="line">            add_info()</span><br><span class="line">        <span class="keyword">elif</span> key == <span class="string">'2'</span>:</span><br><span class="line">            del_info()</span><br><span class="line">        <span class="keyword">elif</span> key == <span class="string">'3'</span>:</span><br><span class="line">            modify_info()</span><br><span class="line">        <span class="keyword">elif</span> key == <span class="string">'4'</span>:</span><br><span class="line">            show_infos()</span><br><span class="line">        <span class="keyword">elif</span> key == <span class="string">'5'</span>:</span><br><span class="line">            save_data()</span><br><span class="line">        <span class="keyword">elif</span> key == <span class="string">'0'</span>:</span><br><span class="line">            quit_confirm = input(<span class="string">"ARE YOU SURE TO QUIT ?( Yes or No ): "</span>)</span><br><span class="line">            <span class="keyword">if</span> quit_confirm == <span class="string">"Yes"</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"ERROR : PLEASE ENTER THE RIGHT COMMAND !"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># RUN</span></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p><em>程序运行结果如下所示 :</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">CATCH THE EXCEPTION: unexpected EOF while parsing (&lt;string&gt;, line 0)</span><br><span class="line"></span><br><span class="line">==================================================</span><br><span class="line">### A SIMPLE STUDENT MANAGEMENT SYSTEM v1.0 ###</span><br><span class="line">1:ADD THE STUDENT INFORMATION</span><br><span class="line">2:DELETE THE STUDENT INFORMATION</span><br><span class="line">3:MODIFY THE STUDENT INFORMATION</span><br><span class="line">4:DISPLAY ALL OF STUDENT INFORMATIONS</span><br><span class="line">5:SAVE ALL OF STUDENT INFORMATIONS</span><br><span class="line">0:EXIT</span><br><span class="line">==================================================</span><br><span class="line">PLEASE ENTER THE SPECIFIED NO OF MENU: 1</span><br><span class="line">PLEASE ENTER THE NEW STUDENT&apos;S NAME: 黄宇辉</span><br><span class="line">PLEASE ENTER THE NEW STUDENT&apos;S SEX: 男</span><br><span class="line">PLEASE ENTER THE NEW STUDENT&apos;S PHONE: 00000000000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==================================================</span><br><span class="line">### A SIMPLE STUDENT MANAGEMENT SYSTEM v1.0 ###</span><br><span class="line">1:ADD THE STUDENT INFORMATION</span><br><span class="line">2:DELETE THE STUDENT INFORMATION</span><br><span class="line">3:MODIFY THE STUDENT INFORMATION</span><br><span class="line">4:DISPLAY ALL OF STUDENT INFORMATIONS</span><br><span class="line">5:SAVE ALL OF STUDENT INFORMATIONS</span><br><span class="line">0:EXIT</span><br><span class="line">==================================================</span><br><span class="line">PLEASE ENTER THE SPECIFIED NO OF MENU: 4</span><br><span class="line"></span><br><span class="line">==================================================</span><br><span class="line">ALL OF STUDENT INFORMATION BE SHOWED AS FOLLOW</span><br><span class="line">==================================================</span><br><span class="line">NO       NAME        SEX     PHONE</span><br><span class="line">1        黄宇辉       男      00000000000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==================================================</span><br><span class="line">### A SIMPLE STUDENT MANAGEMENT SYSTEM v1.0 ###</span><br><span class="line">1:ADD THE STUDENT INFORMATION</span><br><span class="line">2:DELETE THE STUDENT INFORMATION</span><br><span class="line">3:MODIFY THE STUDENT INFORMATION</span><br><span class="line">4:DISPLAY ALL OF STUDENT INFORMATIONS</span><br><span class="line">5:SAVE ALL OF STUDENT INFORMATIONS</span><br><span class="line">0:EXIT</span><br><span class="line">==================================================</span><br><span class="line">PLEASE ENTER THE SPECIFIED NO OF MENU: 5</span><br><span class="line">SAVE ALL OF STUDENT INFORMATIONS SUCCESSFULLY</span><br><span class="line"></span><br><span class="line">. . . . . .</span><br></pre></td></tr></table></figure></p><p><em>使用 Python 写完这个简单程序后，让我指间感觉超轻松，这语法太简洁了吧! 符合我的风格嘿嘿~</em></p><blockquote><p>推荐给初学 Python 同学的编程书籍 : 《Python 快速编程入门》- 黑马程序员编著  ( 本书对于现在的我来说，一周就可以完成全部的学习咯~ )</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-hello-Python&quot;&gt;&lt;a href=&quot;#学习笔记-hello-Python&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : hello Python&quot;&gt;&lt;/a&gt;学习笔记 : hello Python&lt;/h2&gt;&lt;h3 id=&quot;P
      
    
    </summary>
    
    
      <category term="Python" scheme="https://yubuntu0109.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>my growth journey of github</title>
    <link href="https://yubuntu0109.github.io/2019/11/03/my-growth-journey-of-github/"/>
    <id>https://yubuntu0109.github.io/2019/11/03/my-growth-journey-of-github/</id>
    <published>2019-11-03T17:16:54.000Z</published>
    <updated>2019-11-17T05:13:30.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录我的-GitHub-成长之旅"><a href="#记录我的-GitHub-成长之旅" class="headerlink" title="记录我的 GitHub 成长之旅"></a>记录我的 GitHub 成长之旅</h1><p><em>下面很多截图之所以能保留到现在是因为我有一个好习惯 : 珍藏的图片都会被我整齐分类后存放到指定文件夹下嘿嘿~</em></p><h2 id="2018年02月26号"><a href="#2018年02月26号" class="headerlink" title="2018年02月26号"></a>2018年02月26号</h2><p><em>大一下学期，既 2017年12月31号 我向学院提交了转专业生申请表. 我真的真的真的超级喜欢软件工程专业，而不是通信工程专业. 经过一个寒假的焦急等待，幸运的是我终于成功转专业到软件工程，记得那天( 2018年02月26号 )我收到通知时都感动哭了~</em></p><hr><h2 id="2018年09月22号"><a href="#2018年09月22号" class="headerlink" title="2018年09月22号"></a>2018年09月22号</h2><p><em>大二上学期和往常一样，总是喜欢将空闲时间花在在图书馆. 只不过此时我已沉迷于了 Linux 操作系统咯，我在图书馆翻看了很多关于操作系统的图书，最终我选择了 Ubuntu. 经过仔细的安装操作，终于一次性地将 Ubutntu18.04 安装在了我的联想小新潮( Windows 10 Pro )上.</em></p><p><em>因为本人特别喜欢 Mac 主题，所以随即就给我的 Ubuntu 安装了一个 Mac 主题，其中参考了B站大佬 Anduin2007 的视频 : <a href="https://www.bilibili.com/video/av26156974" target="_blank" rel="noopener">如何让Ubuntu高仿Mac OS</a>. 觉的他视频特别不错就看了他的其它视频，例如其中让我当即拥抱 GitHub 的视频 : <a href="https://www.bilibili.com/video/av30153849" target="_blank" rel="noopener">如何学习才能成为软件工程师</a>. 真心非常感谢他一直以来的技术分享，让我从中让获益匪浅! 我也一直关注着他，把他视为我的知识源泉~</em></p><p><em>看完 Anduin2007 的技术分享视频后，随即便创建了一个属于我自己的 GitHub 账号，因为热爱 Linux( Ubuntu )操作系统，所以创建 GitHub 时就把 GitHub 账户名初始化成了 : <code>YUbuntu019</code>，其中 Y 是指我姓名 宇 的汉子首字母，0109 既我的生日嘿嘿~</em></p><p><em>初次安装好 Ubuntu18.04 时立即激动地截下了一张图，一直珍藏到现在嘿嘿~</em><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/03/my-growth-journey-of-github/github-blog-20180922_ubuntu18.04-desktop.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p><em>成功安装 Mac 主题后的样子，太美了吧~</em><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/03/my-growth-journey-of-github/github-blog-20180922_ubuntu18.04-mac-theme.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p><em>尝试学习 Shell 时的样子，So cool or right ?</em><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/03/my-growth-journey-of-github/github-blog-20180922_ubuntu18.04-shell.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></p><hr><h2 id="2019年02月22号"><a href="#2019年02月22号" class="headerlink" title="2019年02月22号"></a>2019年02月22号</h2><p><em>大二上学期寒假里我选择待在家里继续学习编程知识，谁让我那么热爱 coding 呢~ 由于已在大一时( 大一下学期暑假里每天都在刷题啊哈哈~ )参加了18年9月份的全国计算机考试，并成功考过了 <code>二级Java程序设计</code> 及 <code>MySQL数据库设计</code>. 所以这个寒假放假前又报考了两门全国计算机等级考试 : <code>二级C程序设计</code> 及 <code>三级数据库设计</code>. 三月份中旬就要考试咯，所以在寒假里我也一直在为此准备着，清晰地记得除夕前天晚上还在 coding 啊哈哈~</em></p><p><em>从 18年9月22号 下午创建 GitHub 账户到今日为止已经过去五个月咯~</em></p><p><em>我的 GitHub 主页</em><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/03/my-growth-journey-of-github/github-blog-20190222_github-homepage.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p><em>记得我当时正在主要做了如下几件事 :</em></p><ul><li>学习 <a href="https://github.com/YUbuntu0109/Linux-Ubuntu" target="_blank" rel="noopener">Shell 程序设计语言</a></li><li>学习 <a href="https://github.com/YUbuntu0109/Data-Structures-and-Algorithm-Analysis-in-C" target="_blank" rel="noopener">C 语言数据结构与算法</a></li><li>用 Java 写一个项目 : <a href="https://github.com/YUbuntu0109/Student-management-system-CS" target="_blank" rel="noopener">学生管理系统( C/S )</a></li><li>用 Java 写一个项目 : <a href="https://github.com/YUbuntu0109/Instant-messaging-software---Java-swing" target="_blank" rel="noopener">基于 UDP 的聊天应用程序( C/S )</a></li><li>用 Java 写一个小游戏 : <a href="https://github.com/YUbuntu0109/Gluttonous-Snake" target="_blank" rel="noopener">水果贪吃蛇游戏</a></li><li>将NCRE学习笔记及刷过的试卷开源 : <a href="https://github.com/YUbuntu0109/NCRE" target="_blank" rel="noopener">NCRE : 二级C、Java、MySQL及三级数据库</a></li></ul><hr><h2 id="2019年03月09号"><a href="#2019年03月09号" class="headerlink" title="2019年03月09号"></a>2019年03月09号</h2><p><em>使用 Hexo + GitHub 搭建了一个属于我自己的 <a href="https://yubuntu0109.github.io/">静态博客网站</a>，并开始尝试学习写博客~</em></p><p><em>我的 Hexo blog 主页</em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/03/my-growth-journey-of-github/github-blog-20190331_hexoblog-homepage.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure><hr><h2 id="2019年06月17号"><a href="#2019年06月17号" class="headerlink" title="2019年06月17号"></a>2019年06月17号</h2><p><em>我的 GitHub 主页</em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/03/my-growth-journey-of-github/github-blog-20190617_github-homepage.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure><p><em>从中可以清晰地看出，我当时正在主要做如下几件事 :</em></p><ul><li>使用 Servlet 写一个项目 : <a href="https://github.com/YUbuntu0109/sms" target="_blank" rel="noopener">学生信息管理系统( B/S )</a></li><li>学习 SSM 框架，并用其写一个简单的 CURD 小项目 : <a href="https://github.com/YUbuntu0109/ssm-beginner" target="_blank" rel="noopener">ssm-beginner</a></li><li>使用 SSM 框架写一个项目 : <a href="https://github.com/YUbuntu0109/sms-ssm" target="_blank" rel="noopener">学生管理系统( B/S )</a></li></ul><hr><h2 id="2019年6月21号"><a href="#2019年6月21号" class="headerlink" title="2019年6月21号"></a>2019年6月21号</h2><p><em>一直以来，我从B站上获取了很多编程知识，其也是我的知识源泉之一. 今天决定开始在B站上做点力所能及的事情，既做编程技术及项目分享! 由此我的第一个视频便在B站上诞生了嘿嘿~ 其播出后短时间会引来那么多同学的响应与支持是我真心没有想到的，真心为自己的视频可以帮助到其他同学而感动~</em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/03/my-growth-journey-of-github/github-blog-20190621_B-homepage.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure><hr><h2 id="2019年07月04号"><a href="#2019年07月04号" class="headerlink" title="2019年07月04号"></a>2019年07月04号</h2><p><em>大二下学期放暑假前，有很多小伙伴在B站上及QQ群里私信我，向我询问如何高效学习编程知识及其线路规划，想了想. . . 于是我将自己的所有学习笔记整理了一下并上传到了我的静态博客网站仓库中，然后经仔细分类后将其一一列在了 <code>README.md</code> 上. 要知道我其实一直在强调一点 : <code>写博客、做分享、及写项目等是高效学习编程的最好方式！！！</code>之所以把我日常的学习笔记、小项目开源也是为了向大家证明我是如何从中获益的~</em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/03/my-growth-journey-of-github/github-blog-20190704_hexoblog-opensource1.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/03/my-growth-journey-of-github/github-blog-20190704_hexoblog-opensource2.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><hr><h2 id="2019年07月22号"><a href="#2019年07月22号" class="headerlink" title="2019年07月22号"></a>2019年07月22号</h2><p><em>暑假我选择待在家里继续学习编程知识，每天的生活和学校一样 : <code>while( summer holiday ){ coding，eating and sleeping }. . .</code> 今天发现我的 Hexo blog 的用户总访问量已成功突破 <code>10000+</code> ! 想到自己分享的知识可以让其他同学也从中获益我就感觉很开心呀~</em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/03/my-growth-journey-of-github/github-blog-20190722_hexoblog-homepage1-1w.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/03/my-growth-journey-of-github/github-blog-20190722_hexoblog-homepage2-1w.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure><p><em>在暑假里我学习的主要内容如下 :</em></p><ul><li><a href="https://github.com/YUbuntu0109/vue-learning" target="_blank" rel="noopener">学习 Vue 前端框架</a></li><li><a href="https://github.com/YUbuntu0109/Shiro-learning" target="_blank" rel="noopener">学习 Shiro 安全框架</a></li><li><a href="https://github.com/YUbuntu0109/springboot-shiro" target="_blank" rel="noopener">学习并改造 springboot-shiro 项目</a></li><li><a href="https://github.com/YUbuntu0109/crawler-learning" target="_blank" rel="noopener">学习 Java 爬虫技术，并写个JD小爬虫</a></li><li><a href="https://github.com/YUbuntu0109/YUbuntu0109.github.io" target="_blank" rel="noopener">学习 JDK 8/9/10/11 新特性( 笔记 )</a></li><li><a href="https://github.com/YUbuntu0109/springboot-beginner" target="_blank" rel="noopener">继续学习 Spring Boot，重写 springboot-beginner 小项目</a></li></ul><hr><h2 id="2019年10月04号"><a href="#2019年10月04号" class="headerlink" title="2019年10月04号"></a>2019年10月04号</h2><p><em>今年我的 Hexo blog 的用户总访问量成功突破 <code>20000+</code> ! 感谢各位小伙伴一直以来的支持! 我会坚持做分享哒~</em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/03/my-growth-journey-of-github/github-blog-20191004_hexoblog-homepage-2w.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure><hr><h2 id="2019年11月02号"><a href="#2019年11月02号" class="headerlink" title="2019年11月02号"></a>2019年11月02号</h2><p><em>一觉醒来，发现我的 <code>GitHub followers</code> 成功达到 <code>100+</code> ! 而且自己开源的博客笔记项目的 <code>star</code> 数也达到了 <code>100</code> ! 这真的是值得纪念的日子啊，超级开心哟~</em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/03/my-growth-journey-of-github/github-blog-20191102_github-homepage.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/03/my-growth-journey-of-github/github-blog-20191102_hexoblog-opensource1.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure><p><em>从大三开学以来，我主要的学习内容如下 :</em></p><ul><li><a href="https://github.com/YUbuntu0109/YUbuntu0109.github.io" target="_blank" rel="noopener">坚持写博客，做分享</a></li><li><a href="https://github.com/YUbuntu0109/design-patterns-in-java" target="_blank" rel="noopener">详解 Java 的二十三种设计模式</a></li><li><a href="https://github.com/YUbuntu0109/VBlog" target="_blank" rel="noopener">一个基于 Vue + SpringBoot 并采用当下流行的前后端分离开发模式实现的多用户博客管理平台</a></li></ul><hr><h2 id="2019年11月06号"><a href="#2019年11月06号" class="headerlink" title="2019年11月06号"></a>2019年11月06号</h2><p><em>( 大三下学期 )今天在我开源的 <a href="https://github.com/YUbuntu0109/YUbuntu0109.github.io" target="_blank" rel="noopener">博客项目仓库</a> 中创建了两个 <a href="https://github.com/YUbuntu0109/YUbuntu0109.github.io/projects" target="_blank" rel="noopener">project( kanban )</a>，用于高效管理自己的编程学习及项目计划的进程. 这里展示着我日常所有的编程学习及项目计划的进程，大家可作为参考来创建自己所需的 kanban 哟~  🧡@GitHub</em></p><p><em>我的编程学习进度看板</em><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/03/my-growth-journey-of-github/github-blog-20191106_github-project_learning-plain.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p><em>我的项目进程看板</em><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/03/my-growth-journey-of-github/github-blog-20191106_github-project_project-plain.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;记录我的-GitHub-成长之旅&quot;&gt;&lt;a href=&quot;#记录我的-GitHub-成长之旅&quot; class=&quot;headerlink&quot; title=&quot;记录我的 GitHub 成长之旅&quot;&gt;&lt;/a&gt;记录我的 GitHub 成长之旅&lt;/h1&gt;&lt;p&gt;&lt;em&gt;下面很多截图之所以能
      
    
    </summary>
    
    
      <category term="github_" scheme="https://yubuntu0109.github.io/tags/github/"/>
    
      <category term="life" scheme="https://yubuntu0109.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>What&#39;s the DevOps ?</title>
    <link href="https://yubuntu0109.github.io/2019/11/01/What-s-the-DevOps/"/>
    <id>https://yubuntu0109.github.io/2019/11/01/What-s-the-DevOps/</id>
    <published>2019-11-01T18:21:08.000Z</published>
    <updated>2019-11-17T05:13:30.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-What’s-the-DevOps"><a href="#学习笔记-What’s-the-DevOps" class="headerlink" title="学习笔记 : What’s the DevOps ?"></a>学习笔记 : What’s the DevOps ?</h2><p><em>这周在学习 CI/CD( Continuous Integration/Continuous Deployment )时，无意间接触到了 DevOps 这个词! 那么什么是 DevOps 呢? 于是半夜在学校的图书管理系统里检索了这个词语，果然检索出了有很多相关书籍哟~ 幸运的是，经过两天空闲时间的学习让我对 DevOps 有了浅薄的认识，接下来就来简单地介绍一下 DevOps 的吧~</em></p><h3 id="什么是-DevOps"><a href="#什么是-DevOps" class="headerlink" title="什么是 DevOps"></a>什么是 DevOps</h3><p><em>自从 2019 年 DevOps 一词出现以来，其所覆盖的内容在各方专业人士的解读和分析中变得越来越广泛. 在各种讨论和文献中，大量的知识内容( 有些是新出现的，有些是原有的 )被认为和 DevOps 有关，这会让 DevOps 的实践者非常困惑. DevOps 迄今为止还没有得到广泛公认的定义以及确定的知识内容. 接下来就让我们通过 DevOps 的发展渊源来逐渐了解它吧~</em></p><h3 id="DevOps-发展渊源"><a href="#DevOps-发展渊源" class="headerlink" title="DevOps 发展渊源"></a>DevOps 发展渊源</h3><p><em>DevOps是敏捷开发的延续，它将敏捷的精神延伸至运维( Operation )阶段. 敏捷开发的主要目的是响应变化，快速交付价值. 以 2001 年的 <code>敏捷宣言</code> 发布这个里程碑为起点，开始几年内企业主要在软件的开发阶段推行敏捷，并没有覆盖到软件的运维阶段. 随着互联网的不断发展，市场变化越来越快，2007年之后软件工程领域出现了新的变化，DevOps星星之火便开始出现~</em></p><h4 id="萌芽阶段-2007-2008-年"><a href="#萌芽阶段-2007-2008-年" class="headerlink" title="萌芽阶段( 2007~2008 年 )"></a>萌芽阶段( 2007~2008 年 )</h4><p><em>详情看书吧嘿嘿. . . . . .</em></p><h4 id="社区确立阶段-2009-2019-年"><a href="#社区确立阶段-2009-2019-年" class="headerlink" title="社区确立阶段( 2009~2019 年 )"></a>社区确立阶段( 2009~2019 年 )</h4><p><em>详情看书吧嘿嘿. . . . . .</em></p><h4 id="产业关注阶段-2011-2012-年"><a href="#产业关注阶段-2011-2012-年" class="headerlink" title="产业关注阶段( 2011~2012 年 )"></a>产业关注阶段( 2011~2012 年 )</h4><p><em>2019年 6 月，第二届 Velocity 大会在美国圣荷西召开，当时的 Flickr 技术运维资深副总裁 John Allspaw 和工程总监 Paul Hammond 一起在大会上做了一个题目为 <code>“10 + Deploys per Day : Dav and Ops Cooperation at Flickr”</code> 的演讲，演讲后来轰动了业界，也有力地证明了 Dev 和 Ops 可以有效工作在一起从而提高软件部署的可能性.</em></p><p><em>Prtrick 在网上看到这个演讲后非常激动，受到大会的启发，他在比利时也发起了名为 DevOpsDays 的自己的会议，最后大会出奇地成功，以至于大家在 Twitter 上的讨论热情不减. <code>受限于 Twitter 上字符的长度，为了精简，大家就把 Twitter 上的话题 #DevOpsDays 简写成了 #DevOps 了，于是 DevOps 一词便在社区中慢慢确定了.</code></em></p><h4 id="相关基础基础协同发展的阶段-2013"><a href="#相关基础基础协同发展的阶段-2013" class="headerlink" title="相关基础基础协同发展的阶段( 2013~ )"></a>相关基础基础协同发展的阶段( 2013~ )</h4><p><em>详情看书吧嘿嘿. . . . . .</em></p><h3 id="DevOps-应用与研究现状"><a href="#DevOps-应用与研究现状" class="headerlink" title="DevOps 应用与研究现状"></a>DevOps 应用与研究现状</h3><p><em>目前针对 DevOps 的研究主要集中在微服务、持续集成与储蓄部署、自动化工具的研发等几个方面</em></p><ul><li>微服务( Microservices )</li><li>持续集成与持续交付<ul><li>持续集成( Continuous Integration )</li><li>持续交付( Continuous Delivery )</li><li>持续部署( Continuous Deployment )</li></ul></li><li>工具研究与开发<ul><li>持续集成工具</li><li>持续部署工具</li></ul></li></ul><blockquote><p>📖 以上内容摘自书籍 <code>《DevOps 原理、方法与实践》· 荣国平 张贺 邵栋 等编著</code>. 本人强烈向初学者推荐此书 : 本书是目前国内( 也可能是国际范围内 )第一本 DevOps 的系统教材. 同时也是一本不可多得的软件工程教材，既适合软件工程及相关专业的学生学习，也有助于软件企业技术人员阅读. 相信各位读完此书一定会获益匪浅~</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-What’s-the-DevOps&quot;&gt;&lt;a href=&quot;#学习笔记-What’s-the-DevOps&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : What’s the DevOps ?&quot;&gt;&lt;/a&gt;学习笔记 : What’s th
      
    
    </summary>
    
    
      <category term="DevOps" scheme="https://yubuntu0109.github.io/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>程序员必备社交平台之Gitter</title>
    <link href="https://yubuntu0109.github.io/2019/11/01/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E5%A4%87%E7%A4%BE%E4%BA%A4%E5%B9%B3%E5%8F%B0%E4%B9%8BGitter/"/>
    <id>https://yubuntu0109.github.io/2019/11/01/程序员必备社交平台之Gitter/</id>
    <published>2019-11-01T17:33:54.000Z</published>
    <updated>2019-11-17T05:13:30.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-程序员必备社交平台之Gitter"><a href="#学习笔记-程序员必备社交平台之Gitter" class="headerlink" title="学习笔记 : 程序员必备社交平台之Gitter"></a>学习笔记 : 程序员必备社交平台之Gitter</h2><p><em>昨天晚上无意间接触到了 Gitter，并创建了我的第一个名为 <a href="https://gitter.im/Mutual-learning/community?utm_source=share-link&amp;utm_medium=link&amp;utm_campaign=share-link" target="_blank" rel="noopener">Mutual learning的聊天室</a>，并将它作为小徽章加入到了我开源的<a href="https://github.com/YUbuntu0109/YUbuntu0109.github.io" target="_blank" rel="noopener">学习笔记项目</a>中. Gitter 里汇集着世界各地的优秀程序开发者及社区，你可以轻易地与他们交流你的想法、代码、问题等. 相信你一定可以从他们的交流中获益匪浅~</em></p><p><em>点击小徽章即可进入网页端的聊天室( Mutual learning )</em><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/01/程序员必备社交平台之Gitter/Gitter-onBlog.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p><em>当然 Gitter 也有桌面应用端及移动客户端</em><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/01/程序员必备社交平台之Gitter/Gitter-onDesktop.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></p><blockquote><p>💬 Gitter : <a href="https://gitter.im/" target="_blank" rel="noopener">https://gitter.im/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-程序员必备社交平台之Gitter&quot;&gt;&lt;a href=&quot;#学习笔记-程序员必备社交平台之Gitter&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : 程序员必备社交平台之Gitter&quot;&gt;&lt;/a&gt;学习笔记 : 程序员必备社交平台之Gitt
      
    
    </summary>
    
    
      <category term="Gitter" scheme="https://yubuntu0109.github.io/tags/Gitter/"/>
    
  </entry>
  
  <entry>
    <title>使用Travis CI持续集成我的开源博客</title>
    <link href="https://yubuntu0109.github.io/2019/10/28/%E4%BD%BF%E7%94%A8Travis-CI%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%88%91%E7%9A%84%E5%BC%80%E6%BA%90%E5%8D%9A%E5%AE%A2/"/>
    <id>https://yubuntu0109.github.io/2019/10/28/使用Travis-CI持续集成我的开源博客/</id>
    <published>2019-10-28T17:22:35.000Z</published>
    <updated>2019-11-17T05:13:30.621Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-使用-Travis-CI-持续集成我的-Hexo-开源博客"><a href="#学习笔记-使用-Travis-CI-持续集成我的-Hexo-开源博客" class="headerlink" title="学习笔记 : 使用 Travis CI 持续集成我的 Hexo 开源博客"></a>学习笔记 : 使用 Travis CI 持续集成我的 Hexo 开源博客</h2><h3 id="Travis-CI-for-beginner"><a href="#Travis-CI-for-beginner" class="headerlink" title="Travis CI for beginner"></a>Travis CI for beginner</h3><blockquote><p>The following content from : <a href="https://docs.travis-ci.com/user/for-beginners/" target="_blank" rel="noopener">https://docs.travis-ci.com/user/for-beginners/</a></p></blockquote><h4 id="What-Is-Continuous-Integration-CI"><a href="#What-Is-Continuous-Integration-CI" class="headerlink" title="What Is Continuous Integration (CI)?"></a>What Is Continuous Integration (CI)?</h4><p>Continuous Integration is the practice of merging in small code changes<br>frequently - rather than merging in a large change at the end of a development<br>cycle. The goal is to build healthier software by developing and testing in smaller<br>increments. This is where Travis CI comes in.</p><p>As a continuous integration platform, Travis CI supports your development<br>process by automatically building and testing code changes, providing immediate<br>feedback on the success of the change. Travis CI can also automate other parts<br>of your development process by managing deployments and notifications.  </p><h4 id="CI-Builds-and-Automation-Building-Testing-Deploying"><a href="#CI-Builds-and-Automation-Building-Testing-Deploying" class="headerlink" title="CI Builds and Automation: Building, Testing, Deploying"></a>CI Builds and Automation: Building, Testing, Deploying</h4><p>When you run a build, Travis CI clones your GitHub repository into a brand-new<br>virtual environment, and carries out a series of tasks to build and test your<br>code. If one or more of those tasks fail, the build is considered<br><a href="#breaking-the-build"><em>broken</em></a>. If none of the tasks fail, the build is<br>considered <a href="#breaking-the-build"><em>passed</em></a> and Travis CI can deploy your code<br>to a web server or application host.</p><p>CI builds can also automate other parts of your delivery workflow. This means<br>you can have jobs depend on each other with <a href="/user/build-stages/">Build Stages</a>,<br>set up <a href="/user/notifications/">notifications</a>, prepare<br><a href="/user/deployment/">deployments</a> after builds and many other tasks.</p><h4 id="Builds-Jobs-Stages-and-Phases"><a href="#Builds-Jobs-Stages-and-Phases" class="headerlink" title="Builds, Jobs, Stages and Phases"></a>Builds, Jobs, Stages and Phases</h4><p>In the Travis CI documentation, some common words have specific meanings:</p><ul><li><em>phase</em> - the <a href="/user/job-lifecycle/">sequential steps</a><br>of a job. For example, the <code>install</code> phase, comes before the <code>script</code> phase,<br>which comes before the optional <code>deploy</code> phase.</li><li><em>job</em> - an automated process that clones your repository into a virtual<br>environment and then carries out a series of <em>phases</em> such as compiling your<br>code, running tests, etc. A job fails, if the return code of the <code>script</code> <em>phase</em><br>is non-zero.</li><li><em>build</em> - a group of <em>jobs</em>. For example, a build might have two <em>jobs</em>, each<br>of which tests a project with a different version of a programming language.<br>A <em>build</em> finishes when all of its jobs are finished.</li><li><em>stage</em> - a group of <em>jobs</em> that run in parallel as part of a sequential build<br>process composed of multiple <a href="/user/build-stages/">stages</a>.</li></ul><h4 id="Breaking-the-Build"><a href="#Breaking-the-Build" class="headerlink" title="Breaking the Build"></a>Breaking the Build</h4><p>The build is considered <em>broken</em>, when one or more of its jobs complete with a<br>state that is not <em>passed</em>:</p><ul><li><em>errored</em> - a command in the <code>before_install</code>, <code>install</code>, or <code>before_script</code><br>phase returned a non-zero exit code. The job stops immediately.</li><li><em>failed</em> - a command in the <code>script</code> phase returned a non-zero exit code. The<br>job continues to run until it completes.</li><li><em>canceled</em> - a user cancels the job before it completes.</li></ul><p>Our <a href="/user/common-build-problems/">Common Builds Problems</a> page is a good place<br>to start troubleshooting why your build is broken.</p><h4 id="Infrastructure-and-Environment-Notes"><a href="#Infrastructure-and-Environment-Notes" class="headerlink" title="Infrastructure and Environment Notes"></a>Infrastructure and Environment Notes</h4><p>Travis CI offers a few different infrastructure environments, so you can select<br>the setup that suits your project best:</p><ul><li><em>Ubuntu Linux</em> - these Linux Ubuntu environments run inside full virtual machines, provide plenty of computational resources, and support the use of <code>sudo</code>, <code>setuid</code>, and <code>setgid</code>. Check out more information on the <a href="/user/reference/linux/">Ubuntu Linux Build Environment</a>.</li><li><em>macOS</em> - uses one of several versions of the macOS operating system. This environment is useful for building projects that require the macOS software, such as projects written in Swift. It is not a requirement to use the macOS environment, if you develop on a macOS machine. Here you can find more details on the <a href="/user/reference/osx/">macOS Build Environment</a>.</li><li><em>Windows</em> - currently Windows Server version 1803 is supported. If you want to know more about it, see the <a href="/user/reference/windows/">Windows Build Environment</a>.</li></ul><p>More details on our build environments are available in our <a href="/user/ci-environment/">CI Environment</a> documentation.</p><blockquote><p>🚀 Now that you’ve read the basics, head over to our <a href="/user/tutorial/">Tutorial</a> for details on setting up your first build!  Travis CI User Documentaiton : <a href="https://docs.travis-ci.com/" target="_blank" rel="noopener">https://docs.travis-ci.com/</a> and the open source address of docs: <a href="https://github.com/travis-ci/docs-travis-ci-com" target="_blank" rel="noopener">https://github.com/travis-ci/docs-travis-ci-com</a></p></blockquote><h3 id="Continuous-Ingration-with-my-Hexo-blog"><a href="#Continuous-Ingration-with-my-Hexo-blog" class="headerlink" title="Continuous Ingration with my Hexo blog"></a>Continuous Ingration with my Hexo blog</h3><p><em>将 Travis CI 持续集成到 Hexo blog 的基本步骤如下,详细信息请参考文章最下方的 <code>Reference</code></em></p><ol><li>创建 Travis CI 账户</li><li>生成并配置 Access Token</li><li>创建 .travis.yml 配置文件</li><li>发布新博客( 测试是否成功集成 Travis CI )</li></ol><blockquote><p>成功集成 Travis CI 后，往后每写完一篇博客文章后直接 pull 到远程仓库即可( 都已经集成 CI 了，就不要几篇几篇的一起 pull 啦~ )，既不需要再在本地执行将 Markdown 格式编写的博客文章生成 HTML 页面并部署到远程仓库的命令咯! 成功 pull 到远程仓库后，Travis CI 会先逐个测试你的 commit 是否会对 Hexo blog 运行环境造成影响，其后便尝试运行你所定义的脚本( hexo clean + hexo g + · · ·). . . 详情可参考我的 Travis CI 配置文件 : <a href="https://github.com/YUbuntu0109/YUbuntu0109.github.io/blob/HexoBackup/.travis.yml" target="_blank" rel="noopener">.travis.yml</a></p></blockquote><h3 id="Introduce-my-personal-blog"><a href="#Introduce-my-personal-blog" class="headerlink" title="Introduce my personal blog"></a>Introduce my personal blog</h3><p>⏳ <em>时间如梭~ 自己现在都已经大三了. 大二时我才开始拥抱 GitHub，并使用 Hexo 加 Github 搭建了一个属于自己的静态博客网站，继而从此养成了写编程学习笔记的好习惯. 此项目包含了我大一到大三所有的编程学习笔记 : 真心希望自己的这些日常学习笔记，心得，及项目能够帮助一些同学提高学习效率！往后无论是读研，还是踏入社会后，我都会将她视为伴我成长的伙伴，一直维护着她，这一切的一切都是为了能够写出更加优美的代码哟~ <a href="https://github.com/YUbuntu0109/YUbuntu0109.github.io" target="_blank" rel="noopener">https://github.com/YUbuntu0109/YUbuntu0109.github.io</a></em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/28/使用Travis-CI持续集成我的开源博客/Travis-CI-MyBlogWebsite-1.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/28/使用Travis-CI持续集成我的开源博客/Travis-CI-MyBlogWebsite-2.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://www.jianshu.com/p/9d056d5ba78e" target="_blank" rel="noopener">Travis CI 持续集成 GitHub 个人博客</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html" target="_blank" rel="noopener">持续集成服务 Travis CI 教程</a></li><li><a href="https://www.bilibili.com/read/cv2884489" target="_blank" rel="noopener">使用 Travis CI 自动部署 Hexo 博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-使用-Travis-CI-持续集成我的-Hexo-开源博客&quot;&gt;&lt;a href=&quot;#学习笔记-使用-Travis-CI-持续集成我的-Hexo-开源博客&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : 使用 Travis CI 持续集成
      
    
    </summary>
    
    
      <category term="CI" scheme="https://yubuntu0109.github.io/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>Maven依赖经常导入失败的解决方案</title>
    <link href="https://yubuntu0109.github.io/2019/10/21/Maven%E4%BE%9D%E8%B5%96%E7%BB%8F%E5%B8%B8%E5%AF%BC%E5%85%A5%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://yubuntu0109.github.io/2019/10/21/Maven依赖经常导入失败的解决方案/</id>
    <published>2019-10-21T23:25:45.000Z</published>
    <updated>2019-11-17T05:13:30.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-Maven依赖经常导入失败的解决方案"><a href="#学习笔记-Maven依赖经常导入失败的解决方案" class="headerlink" title="学习笔记 : Maven依赖经常导入失败的解决方案"></a>学习笔记 : Maven依赖经常导入失败的解决方案</h2><p><em>我最近一周在学习并贡献的项目 : <a href="https://github.com/YUbuntu0109/VBlog/tree/dev" target="_blank" rel="noopener">VBlog</a>( 一个基于 Vue + SpringBoot 并采用当下流行的前后端分离开发模式实现的多用户博客管理平台 ). 刚开始将该项目导入到 IDE 并尝试本地运行时,发现<code>Maven</code>依赖竟然又无法正常导入,本来满怀期待的想要在本地体验一下该项目的,哎~  为了再次避免这种尴尬,给出以下两个解决方案,基本上这两个方案配合使用真的可以解决 99% 的问题哟嘿嘿嘿~</em></p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p><em>配置 Maven 镜像站 : 以下是我一直在用的常用镜像站</em><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ailiyun' Maven respository mirror --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>repo1 maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo1.maven.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>repo2 maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo2.maven.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>ui<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Mirror from UK<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://uk.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jboss-public-repository-group<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>JBoss Public Repository Group<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repository.jboss.org/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--http://repo.spring.io/release/--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-maven2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring maven2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo.spring.io/release/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--http://repo.spring.io/libs-milestone/--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-maven1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring maven1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo.spring.io/libs-milestone/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p><em>方案一配置后,发现依赖仍然下载失败 !? 这时候就需要配合使用方案二咯 : 虽然依赖下载失败了,但是你会发现相关文件夹里却多出了很多以<code>.lastUpdated</code>为后缀的文件,这也就是开发者在开发工具中反复导入依赖但始终失败的原因啦~ 这时就需要你通过文件搜索找到本地仓库( 例如 <code>C:\Users\Administrator\.m2\repository</code> )中所有以<code>.lastUpdated</code>为后缀的文件,并将其全部删除即可 !</em></p><blockquote><p>🙏 参考博客 : <a href="https://blog.csdn.net/u012702547/article/details/88071279" target="_blank" rel="noopener">两步解决maven依赖导入失败问题</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-Maven依赖经常导入失败的解决方案&quot;&gt;&lt;a href=&quot;#学习笔记-Maven依赖经常导入失败的解决方案&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : Maven依赖经常导入失败的解决方案&quot;&gt;&lt;/a&gt;学习笔记 : Maven依赖经
      
    
    </summary>
    
    
      <category term="Maven" scheme="https://yubuntu0109.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>JDK 13新特性详解</title>
    <link href="https://yubuntu0109.github.io/2019/10/14/JDK-13%E6%96%B0%E7%89%B9%E6%80%A7%E8%AF%A6%E8%A7%A3/"/>
    <id>https://yubuntu0109.github.io/2019/10/14/JDK-13新特性详解/</id>
    <published>2019-10-14T11:12:07.000Z</published>
    <updated>2019-11-17T05:13:30.485Z</updated>
    
    <content type="html"><![CDATA[<h3 id="学习笔记-详解JDK-13中的新特性"><a href="#学习笔记-详解JDK-13中的新特性" class="headerlink" title="学习笔记 : 详解JDK 13中的新特性"></a>学习笔记 : 详解JDK 13中的新特性</h3><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><em>JDK 13 is the open-source reference implementation of version 13 of the Java SE Platform as specified by by <code>JSR 388</code> in the Java Community Process. JDK 13 reached General Availability on 17 September 2019. Production-ready binaries under the GPL are available from Oracle; binaries from other vendors will follow shortly. The features and schedule of this release were proposed and tracked via the JEP Process, as amended by the <code>JEP 2.0 proposal</code>. The release was produced using the <code>JDK Release Process (JEP 3)</code>.</em></p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>350:     Dynamic CDS Archives</li><li>351:     ZGC: Uncommit Unused Memory</li><li>353:     Reimplement the Legacy Socket API</li><li>354:     Switch Expressions (Preview)</li><li>355:     Text Blocks (Preview)</li></ul><h3 id="时间表"><a href="#时间表" class="headerlink" title="时间表"></a>时间表</h3><ul><li>2019/06/13         Rampdown Phase One (fork from main line)</li><li>2019/07/18         Rampdown Phase Two</li><li>2019/08/08         Initial Release Candidate</li><li>2019/08/22         Final Release Candidate</li><li>2019/09/17         General Availability</li></ul><h3 id="Switch-Expressions-特性演示"><a href="#Switch-Expressions-特性演示" class="headerlink" title="Switch Expressions 特性演示"></a>Switch Expressions 特性演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">JDK12之前版本的写法:许多break使它不必要地冗长,如果忘记写break,则会产生意料之外的结果或者异常,所以针对于此jdk12在这里进行了优化升级</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">switch</span> (score) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">60</span>:</span><br><span class="line">        System.out.println(<span class="string">"及格"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">80</span>:</span><br><span class="line">        System.out.println(<span class="string">"良好"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">90</span>:</span><br><span class="line">        System.out.println(<span class="string">"优秀"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">"default"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JDK12新特性写法:我们建议引入一种新形式的开关标签,写成"case L -&gt;"表示如果标签匹配,则只执行标签右侧的代码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">switch</span> (score) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">60</span> -&gt; System.out.println(<span class="string">"及格"</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">80</span> -&gt; System.out.println(<span class="string">"良好"</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">90</span> -&gt; System.out.println(<span class="string">"优秀"</span>);</span><br><span class="line">    <span class="keyword">default</span> -&gt; System.out.println(<span class="string">"default"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JDK13新特性写法:优化JDK12中的switch语法新特性,使其更加简洁~</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">System.out.println(</span><br><span class="line">        <span class="keyword">switch</span> (score) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">60</span> -&gt; <span class="string">"及格"</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">80</span> -&gt; <span class="string">"良好"</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">90</span> -&gt; <span class="string">"优秀"</span>;</span><br><span class="line">            <span class="keyword">default</span> -&gt; <span class="string">"default"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Text-Blocks-特性演示"><a href="#Text-Blocks-特性演示" class="headerlink" title="Text Blocks 特性演示"></a>Text Blocks 特性演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解释:左边的文本块相当于右边的字符串文字</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">"""</span></span><br><span class="line"><span class="comment">line1</span></span><br><span class="line"><span class="comment">line2   ------&gt;&gt;&gt;   "line 1\nline 2\nline 3\n"</span></span><br><span class="line"><span class="comment">line3</span></span><br><span class="line"><span class="comment">"""</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">HTML 示例程序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//JDK13版本前的写法</span></span><br><span class="line">String html = <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">        <span class="string">"    &lt;body&gt;\n"</span> +</span><br><span class="line">        <span class="string">"        &lt;p&gt;Hello, world&lt;/p&gt;\n"</span> +</span><br><span class="line">        <span class="string">"    &lt;/body&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;/html&gt;\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//JDK13语法新特性的写法</span></span><br><span class="line">String html2 =</span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">            &lt;html&gt;</span></span><br><span class="line"><span class="string">                &lt;body&gt;</span></span><br><span class="line"><span class="string">                    &lt;p&gt;Hello, world&lt;/p&gt;</span></span><br><span class="line"><span class="string">                &lt;/body&gt;</span></span><br><span class="line"><span class="string">            &lt;/html&gt;</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SQL 示例程序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="comment">//JDK13版本前的写法</span></span><br><span class="line">String query = <span class="string">"SELECT `EMP_ID`, `LAST_NAME` FROM `EMPLOYEE_TB`\n"</span> +</span><br><span class="line">        <span class="string">"WHERE `CITY` = 'INDIANAPOLIS'\n"</span> +</span><br><span class="line">        <span class="string">"ORDER BY `EMP_ID`, `LAST_NAME`;\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//JDK13新特性的写法</span></span><br><span class="line">String query2 =</span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        SELECT `EMP_ID`, `LAST_NAME` FROM `EMPLOYEE_TB`</span></span><br><span class="line"><span class="string">        WHERE `CITY` = 'INDIANAPOLIS'</span></span><br><span class="line"><span class="string">        ORDER BY `EMP_ID`, `LAST_NAME`;</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span>;</span><br></pre></td></tr></table></figure><blockquote><p>👍For more information, please refer to : <a href="http://openjdk.java.net/projects/jdk/13/" target="_blank" rel="noopener">http://openjdk.java.net/projects/jdk/13/</a> and the document : <a href="https://docs.oracle.com/en/java/javase/13/" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/13/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;学习笔记-详解JDK-13中的新特性&quot;&gt;&lt;a href=&quot;#学习笔记-详解JDK-13中的新特性&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : 详解JDK 13中的新特性&quot;&gt;&lt;/a&gt;学习笔记 : 详解JDK 13中的新特性&lt;/h3&gt;&lt;h3 i
      
    
    </summary>
    
    
      <category term="JDK" scheme="https://yubuntu0109.github.io/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>详解JDK 12中的新特性</title>
    <link href="https://yubuntu0109.github.io/2019/10/14/JDK-12%E6%96%B0%E7%89%B9%E6%80%A7%E8%AF%A6%E8%A7%A3/"/>
    <id>https://yubuntu0109.github.io/2019/10/14/JDK-12新特性详解/</id>
    <published>2019-10-14T11:11:51.000Z</published>
    <updated>2019-11-17T05:13:30.485Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-详解JDK-12中的新特性"><a href="#学习笔记-详解JDK-12中的新特性" class="headerlink" title="学习笔记 : 详解JDK 12中的新特性"></a>学习笔记 : 详解JDK 12中的新特性</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><em>JDK 12 is the open-source reference implementation of version 12 of the Java SE Platform as specified by by <code>JSR 386</code> in the Java Community Process. JDK 12 reached General Availability on 19 March 2019. Production-ready binaries under the GPL are available from Oracle; binaries from other vendors will follow shortly. The features and schedule of this release were proposed and tracked via the JEP Process, as amended by the <code>JEP 2.0 proposal</code>. The release was produced using the <code>JDK Release Process (JEP 3)</code>.</em></p><h3 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h3><ul><li>189:     Shenandoah: A Low-Pause-Time Garbage Collector (Experimental)</li><li>230:     Microbenchmark Suite</li><li>325:     Switch Expressions (Preview)</li><li>334:     JVM Constants API</li><li>340:     One AArch64 Port, Not Two</li><li>341:     Default CDS Archives</li><li>344:     Abortable Mixed Collections for G1</li><li>346:     Promptly Return Unused Committed Memory from G1</li></ul><h3 id="时间表"><a href="#时间表" class="headerlink" title="时间表"></a>时间表</h3><ul><li>2018/12/13         Rampdown Phase One (fork from main line)</li><li>2019/01/17         Rampdown Phase Two</li><li>2019/02/07         Release-Candidate Phase</li><li>2019/03/19         General Availability</li></ul><h3 id="Switch-Expressions-特性演示"><a href="#Switch-Expressions-特性演示" class="headerlink" title="Switch Expressions 特性演示"></a>Switch Expressions 特性演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="keyword">new</span> Random(<span class="number">100</span>).nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JDK12之前版本的写法:许多break使它不必要地冗长,如果忘记写break,则会产生意料之外的结果或者异常,所以针对于此jdk12在这里进行了优化升级</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">switch</span> (score) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">60</span>:</span><br><span class="line">        System.out.println(<span class="string">"及格"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">80</span>:</span><br><span class="line">        System.out.println(<span class="string">"良好"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">90</span>:</span><br><span class="line">        System.out.println(<span class="string">"优秀"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">"default"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JDK12新特性写法:我们建议引入一种新形式的开关标签,写成"case L -&gt;"表示如果标签匹配,则只执行标签右侧的代码:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">switch</span> (score) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">60</span> -&gt; System.out.println(<span class="string">"及格"</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">80</span> -&gt; System.out.println(<span class="string">"良好"</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">90</span> -&gt; System.out.println(<span class="string">"优秀"</span>);</span><br><span class="line">    <span class="keyword">default</span> -&gt; System.out.println(<span class="string">"default"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JDK12前的写法:许多Switch表达式,每个case都会赋值给一个变量或者执行某种操作,如下是赋值给numLetters变量具体值:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> numLetters;</span><br><span class="line"><span class="keyword">switch</span> (score) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">60</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">70</span>:</span><br><span class="line">        numLetters = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">80</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">90</span>:</span><br><span class="line">        numLetters = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">100</span>:</span><br><span class="line">        numLetters = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"score:"</span> + score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JDK12新特性写法:将此表达为一种陈述是迂回的,重复的,并且容易出错. 意味着我们应该计算numLetters每一天的价值,应该可以直接说,使用更清晰,更安全Switch表达式:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> numLetters2 = <span class="keyword">switch</span> (score) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">60</span>, <span class="number">70</span> -&gt; <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">80</span>, <span class="number">90</span> -&gt; <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">95</span>, <span class="number">100</span> -&gt; <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">default</span> -&gt; <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"count:"</span> + score);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果将它用在方法上,则可以为写成:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">howMany</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (k) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span> -&gt; System.out.println(<span class="string">"one"</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span> -&gt; System.out.println(<span class="string">"two"</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span> -&gt; System.out.println(<span class="string">"many"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">或者类上,例如将这个新特性用在抽象工厂类:</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">T result = <span class="keyword">switch</span> (arg) &#123;</span><br><span class="line">    <span class="keyword">case</span> L1 -&gt; e1;</span><br><span class="line">    <span class="keyword">case</span> L2 -&gt; e2;</span><br><span class="line">    <span class="keyword">default</span> -&gt; e3;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>👍For more information, please refer to <a href="http://openjdk.java.net/projects/jdk/12/" target="_blank" rel="noopener">http://openjdk.java.net/projects/jdk/12/</a> and the document : <a href="https://docs.oracle.com/en/java/javase/12/" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/12/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-详解JDK-12中的新特性&quot;&gt;&lt;a href=&quot;#学习笔记-详解JDK-12中的新特性&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : 详解JDK 12中的新特性&quot;&gt;&lt;/a&gt;学习笔记 : 详解JDK 12中的新特性&lt;/h2&gt;&lt;h3 i
      
    
    </summary>
    
    
      <category term="JDK" scheme="https://yubuntu0109.github.io/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式之Mediator Pattern</title>
    <link href="https://yubuntu0109.github.io/2019/10/10/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8BMediator-Pattern/"/>
    <id>https://yubuntu0109.github.io/2019/10/10/Java设计模式之Mediator-Pattern/</id>
    <published>2019-10-10T12:24:52.000Z</published>
    <updated>2019-11-17T05:13:30.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-Java设计模式之Mediator-Pattern"><a href="#学习笔记-Java设计模式之Mediator-Pattern" class="headerlink" title="学习笔记 : Java设计模式之Mediator Pattern"></a>学习笔记 : Java设计模式之Mediator Pattern</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><em>中介者设计模式 : 定义一个对象来封装一系列对象的交互. 中介者模式使各个用户对象之间不需要显示地相互引用,从而使其耦合松散,而且用户可以独立地改变它们之间的交互. (  Mediator Pattern : Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly,and it lets you vary their interaction independently. )</em></p><blockquote><p>中介者模式又称为调停者模式,它是一种对象行为模式. 在中介者设计模式中,通过引入中介者来简化对象之间的复杂交互,中介者模式是迪米特法则的一个典型应用</p></blockquote><h3 id="角色分析"><a href="#角色分析" class="headerlink" title="角色分析"></a>角色分析</h3><ol><li><em><code>Mediator( 抽象中介者 )</code> : 它定义一个接口,该接口用于与各同事对象之间进行通信.</em></li><li><em><code>ConcreteMediator( 具体中介者 )</code> : 它是抽象中介者的子类,通过协调各个同事对象来实现协作行为,它维持了对各个同事对象的引用.</em></li><li><em><code>Colleague( 抽象同事类 )</code> : 它定义各个同事类公有的方法,并声明了一些抽象方法供子类实现,同时它维持了一个对抽象中介者类的引用,其子类可以通过该引用与中介者通信.</em></li><li><em><code>ConcreteColleague( 具体同时类 )</code> : 它是抽象同事类的子类,每一个同事对象在需要和其他同事对象通信时先与中介者通信,通过中介者间接完成与其他同事类的通信; 在具体同事类中实现了在抽象同事类中声明的抽象方法.</em></li></ol><h3 id="程序示例"><a href="#程序示例" class="headerlink" title="程序示例"></a>程序示例</h3><p><em>下面是一个使用中介者模式的简单示例程序 : 设计一个 CRM 桌面系统,其中包含一个客户信息管理模块,其界面组件之间存在复杂的交互关系,如果删除一个客户,则从客户列表中( List )中删掉对应的项,客户选择组合框( ComboBox )中的客户名称也将减少一个; 如果增加一个客户信息,则客户列表中将增加一个客户,并且组合框中也将增加一项. 为了更好地处理界面组件之间的交互,现使用中介者模式设计该系系统~</em></p><ol><li><p><em>Mediator.java : 抽象中介者类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.mediator_pattern.mediator_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 抽象中介者类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 10/10/2019-12:49 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">componentChanged</span><span class="params">(Component component)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>ConcreteMediator.java : 具体中介者类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.mediator_pattern.mediator_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 具体中介者类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 10/10/2019-12:50 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//维持对各个同事对象的引用</span></span><br><span class="line">    <span class="keyword">public</span> List list;</span><br><span class="line">    <span class="keyword">public</span> Button addButton;</span><br><span class="line">    <span class="keyword">public</span> TextBox userNameTextBox;</span><br><span class="line">    <span class="keyword">public</span> ComboBox comboBox;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装同事对象之间的交互</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">componentChanged</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//单击按钮</span></span><br><span class="line">        <span class="keyword">if</span> (component == addButton) &#123;</span><br><span class="line">            System.out.println(<span class="string">"--- 点击增加信息按钮 ---"</span>);</span><br><span class="line">            list.update();</span><br><span class="line">            comboBox.update();</span><br><span class="line">            userNameTextBox.update();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从列表框选择客户</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (component == list) &#123;</span><br><span class="line">            System.out.println(<span class="string">"\n--- 从列表框选择客户 ---"</span>);</span><br><span class="line">            list.select();</span><br><span class="line">            userNameTextBox.setText();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从组合框选择客户</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (component == comboBox) &#123;</span><br><span class="line">            System.out.println(<span class="string">"\n--- 从组合框选择客户 ---"</span>);</span><br><span class="line">            comboBox.select();</span><br><span class="line">            userNameTextBox.setText();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Component.java : 抽象组件类, 充当抽象同事类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.mediator_pattern.mediator_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 抽象组件类, 充当抽象同事类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 10/10/2019-12:51 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMediator</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转发调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mediator.componentChanged(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Button.java : 按钮类, 充当具体同事类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.mediator_pattern.mediator_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 按钮类, 充当具体同事类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 10/10/2019-12:51 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println("点击添加信息按钮");</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>List.java : 列表框类, 充当具体同事类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.mediator_pattern.mediator_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 列表框类, 充当具体同事类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 10/10/2019-12:52 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"列表框增加一项: 黄宇辉"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"列表框选中项: 黄浩然"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>ComboBox.java : 组合框类, 充当具体同事类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.mediator_pattern.mediator_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 组合框类, 充当具体同事类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 10/10/2019-12:55 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComboBox</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"组合框增加一项: 黄宇辉"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"组合框选中项: 黄浩然"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>TextBox.java : 文本框, 充当具体同事类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.mediator_pattern.mediator_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 文本框, 充当具体同事类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 10/10/2019-12:56 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextBox</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"客户信息增加成功后文本框被清空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文本框显示: 黄浩然"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Client.java : 客户端测试类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.mediator_pattern.mediator_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 客户端测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 10/10/2019-12:58 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义中介者对象</span></span><br><span class="line">        ConcreteMediator mediator = <span class="keyword">new</span> ConcreteMediator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义同事对象</span></span><br><span class="line">        List list = <span class="keyword">new</span> List();</span><br><span class="line">        Button addButton = <span class="keyword">new</span> Button();</span><br><span class="line">        ComboBox comboBox = <span class="keyword">new</span> ComboBox();</span><br><span class="line">        TextBox userNameTextBox = <span class="keyword">new</span> TextBox();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关联中介者</span></span><br><span class="line">        list.setMediator(mediator);</span><br><span class="line">        comboBox.setMediator(mediator);</span><br><span class="line">        addButton.setMediator(mediator);</span><br><span class="line">        userNameTextBox.setMediator(mediator);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化具体同事类</span></span><br><span class="line">        mediator.list = list;</span><br><span class="line">        mediator.comboBox = comboBox;</span><br><span class="line">        mediator.addButton = addButton;</span><br><span class="line">        mediator.userNameTextBox = userNameTextBox;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过中介者进行通信</span></span><br><span class="line">        addButton.changed(); <span class="comment">//点击添加客户信息按钮</span></span><br><span class="line">        list.changed(); <span class="comment">//从列表框中选择客户</span></span><br><span class="line">        comboBox.changed(); <span class="comment">//从组合框中选择客户</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下所示 :</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">--- 点击增加信息按钮 ---</span><br><span class="line">列表框增加一项: 黄宇辉</span><br><span class="line">组合框增加一项: 黄宇辉</span><br><span class="line">客户信息增加成功后文本框被清空</span><br><span class="line"></span><br><span class="line">--- 从列表框选择客户 ---</span><br><span class="line">列表框选中项: 黄浩然</span><br><span class="line">文本框显示: 黄浩然</span><br><span class="line"></span><br><span class="line">--- 从组合框选择客户 ---</span><br><span class="line">组合框选中项: 黄浩然</span><br><span class="line">文本框显示: 黄浩然</span><br></pre></td></tr></table></figure></li></ol><h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/10/Java设计模式之Mediator-Pattern/Mediator-Pattern-ClassDiagram-1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="程序示例-扩展"><a href="#程序示例-扩展" class="headerlink" title="程序示例-扩展"></a>程序示例-扩展</h3><p><em>对上述示例程序进行改进,使客户信息管理窗口下端能够及时显示当前系统中客户信息的总数. 由于上述案例使用了中介者设计模式,所以在原有系统中增加新的组件( 既新的同事类 )将变得很容易,解决方案 : 首先增加一个 Label 类,其次增加一个 ConcreteMediator 的子类 SubConcreteMediator 来实现对 Label 对象的引用,然后在新增的中介者类 SubConcreteMediator 中通过覆盖 componentChanged() 方法实现所有组件( 包括新增Lable组件 )之间的交互. 既原有组件类无需做任何修改,客户端代码仅需做少量修改,其更加符合开闭原则~</em></p><ol><li><p><em>Label.java : 文本标签类, 具体同事类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.mediator_pattern.mediator_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 文本标签类, 具体同事类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 10/10/2019-1:30 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Label</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[ 文本标签内容改变,客户信息总数: +1 ]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>SubConcreteMediator.java : 在新增的该中介者类, 通过覆写componentChanged()方法来实现所有组件(包括新增Label组件)之间的交互</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.mediator_pattern.mediator_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 在新增的该中介者类, 通过覆写componentChanged()方法来实现所有组件(包括新增Label组件)之间的交互</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 10/10/2019-1:30 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubConcreteMediator</span> <span class="keyword">extends</span> <span class="title">ConcreteMediator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加对Label对象的引用</span></span><br><span class="line">    <span class="keyword">public</span> Label label;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">componentChanged</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//super.componentChanged(component);</span></span><br><span class="line">        <span class="comment">//单击按钮</span></span><br><span class="line">        <span class="keyword">if</span> (component == addButton) &#123;</span><br><span class="line">            System.out.println(<span class="string">"--- 点击增加信息按钮 ---"</span>);</span><br><span class="line">            list.update();</span><br><span class="line">            comboBox.update();</span><br><span class="line">            userNameTextBox.update();</span><br><span class="line">            label.update(); <span class="comment">//更新文本标签</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从列表框选择客户</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (component == list) &#123;</span><br><span class="line">            System.out.println(<span class="string">"\n--- 从列表框选择客户 ---"</span>);</span><br><span class="line">            list.select();</span><br><span class="line">            userNameTextBox.setText();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从组合框选择客户</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (component == comboBox) &#123;</span><br><span class="line">            System.out.println(<span class="string">"\n--- 从组合框选择客户 ---"</span>);</span><br><span class="line">            comboBox.select();</span><br><span class="line">            userNameTextBox.setText();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Client.java : 客户端测试类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.mediator_pattern.mediator_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 客户端测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 10/10/2019-12:58 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义中介者对象</span></span><br><span class="line">        SubConcreteMediator mediator = <span class="keyword">new</span> SubConcreteMediator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义同事对象</span></span><br><span class="line">        List list = <span class="keyword">new</span> List();</span><br><span class="line">        Label label = <span class="keyword">new</span> Label();</span><br><span class="line">        Button addButton = <span class="keyword">new</span> Button();</span><br><span class="line">        ComboBox comboBox = <span class="keyword">new</span> ComboBox();</span><br><span class="line">        TextBox userNameTextBox = <span class="keyword">new</span> TextBox();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关联中介者</span></span><br><span class="line">        list.setMediator(mediator);</span><br><span class="line">        label.setMediator(mediator);</span><br><span class="line">        comboBox.setMediator(mediator);</span><br><span class="line">        addButton.setMediator(mediator);</span><br><span class="line">        userNameTextBox.setMediator(mediator);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化具体同事类</span></span><br><span class="line">        mediator.list = list;</span><br><span class="line">        mediator.label = label;</span><br><span class="line">        mediator.comboBox = comboBox;</span><br><span class="line">        mediator.addButton = addButton;</span><br><span class="line">        mediator.userNameTextBox = userNameTextBox;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过中介者进行通信</span></span><br><span class="line">        addButton.changed(); <span class="comment">//点击添加客户按钮</span></span><br><span class="line">        list.changed(); <span class="comment">//从列表框中选择客户</span></span><br><span class="line">        comboBox.changed(); <span class="comment">//从组合框中选择客户</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下所示 :</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--- 点击增加信息按钮 ---</span><br><span class="line">列表框增加一项: 黄宇辉</span><br><span class="line">组合框增加一项: 黄宇辉</span><br><span class="line">客户信息增加成功后文本被清空</span><br><span class="line">[ 文本标签内容改变,客户信息总数: +1 ]</span><br><span class="line"></span><br><span class="line">--- 从列表框选择客户 ---</span><br><span class="line">列表框选中项: 赵艳春</span><br><span class="line">文本框显示: 赵艳春</span><br><span class="line"></span><br><span class="line">--- 从组合框选择客户 ---</span><br><span class="line">组合框选中项: 赵艳春</span><br><span class="line">文本框显示: 赵艳春</span><br></pre></td></tr></table></figure></li></ol><h4 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/10/Java设计模式之Mediator-Pattern/Mediator-Pattern-ClassDiagram-2.png" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-Java设计模式之Mediator-Pattern&quot;&gt;&lt;a href=&quot;#学习笔记-Java设计模式之Mediator-Pattern&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : Java设计模式之Mediator Pattern
      
    
    </summary>
    
    
      <category term="Java" scheme="https://yubuntu0109.github.io/tags/Java/"/>
    
      <category term="design and pattern" scheme="https://yubuntu0109.github.io/tags/design-and-pattern/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式之Observer Pattern</title>
    <link href="https://yubuntu0109.github.io/2019/09/28/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8BObserver-Pattern/"/>
    <id>https://yubuntu0109.github.io/2019/09/28/Java设计模式之Observer-Pattern/</id>
    <published>2019-09-28T13:39:33.000Z</published>
    <updated>2019-11-17T05:13:30.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-Java设计模式之Observer-Pattern"><a href="#学习笔记-Java设计模式之Observer-Pattern" class="headerlink" title="学习笔记 : Java设计模式之Observer Pattern"></a>学习笔记 : Java设计模式之Observer Pattern</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><em>观察者设计模式 : 定义对象之间的一种一对多的依赖关系,使得每当一个对象状态发生改变时其相关依赖对象皆得到通知并被自动更新. ( Observer Pattern : Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically )</em></p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><em>观察者模式的别名有发布-订阅( Publish-Subscribe )模式,模型-视图( Model-View )模式,源-监听器( Source-Listener )模式,从属者( Dependents )模式. 观察者模式是一种对象行为模式. 其用于描述对象之间的依赖关系,为实现多个对象之间的联动提供了一种解决方案,是一种对象行为型模式.</em></p><h3 id="角色分析"><a href="#角色分析" class="headerlink" title="角色分析"></a>角色分析</h3><ol><li><em><code>Subject( 目标 )</code> : 目标又称为主题,它是指被观察的对象. 在目标中定义了一个观察者集合,一个观察者目标可以接收任意数量的观察者来观察,它提供了一系列方法来增加和删除观察者对象,同时它定义了通知方法 notify(). 目标类可以是接口,也可以是抽象类或具体类.</em></li><li><em><code>ConcreteSubject( 具体目标 )</code> : 具体目标是目标类的子类,它通常包含有经常方法改变的数据,当它的状态发生改变时将向它的各个观察者发出通知,同时还可以实现了在目标类中定义的抽象业务逻辑方法. 如果无需扩展目标类,则具体目标类可以省略.</em></li><li><em><code>Observer( 观察者 )</code> : 观察者将对观察目标的改变做出反应,观察者一般定义为接口,该接口声明了更新数据的 update() 方法,因此又称为抽象观察者.</em></li><li><em><code>ConcreteObserver( 具体观察者 )</code> : 在具体观察者中维护了一个指向具体目标对象的引用,它存储具体观察者的有关状态,这些状态需要和目标的状态保持一致. 它实现了在抽象观察者 Observer 中定义的 update() 方法. 通常在实现时可以调用具体目标类的 attach() 方法将自己添加到目标类的集合中或通过 detach() 方法将自己从目标类的集合中删除.</em></li></ol><h3 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h3><p><em>下面是一个使用观察者设计模式的简单示例程序,模拟功能 : 在某多人联机对战游戏中,多个玩家可以加入同一战队组成联盟,当战队中的某一成员被敌人攻击时,其可以向其它队友发送求救通知,队友接收通知后作出相应的反应,既而来实现战队成员之间的联动~</em></p><ol><li><p><em>AllyControllerCenter抽象类 : 指挥部(战队控制中心)类, 充当抽象目标类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.observer_pattern.observer_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 指挥部(战队控制中心)类, 充当抽象目标类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/29/2019-12:02 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AllyControllerCenter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String allyName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个集合用于存储战队成员</span></span><br><span class="line">    <span class="keyword">protected</span> ArrayList&lt;Observer&gt; players = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAllyName</span><span class="params">(String allyName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.allyName = allyName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAllyName</span><span class="params">(String allyName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> allyName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"玩家: [ "</span> + observer.getName() + <span class="string">" ]加入战队"</span>);</span><br><span class="line">        players.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注销方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quit</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"玩家: [ "</span> + observer.getName() + <span class="string">" ]退出战队"</span>);</span><br><span class="line">        players.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明抽象通知方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">noifyObserver</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>ConcreteAllyControlCenter类 : 具体指挥部类, 充当具体目标类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.observer_pattern.observer_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 具体指挥部类, 充当具体目标类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/29/2019-12:16 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteAllyControlCenter</span> <span class="keyword">extends</span> <span class="title">AllyControllerCenter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteAllyControlCenter</span><span class="params">(String allyName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.allyName = allyName;</span><br><span class="line">        System.out.println(<span class="string">"------ 战队: [ "</span> + allyName + <span class="string">" ]组建成功 ------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现通知方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">noifyObserver</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"战队: [ "</span> + <span class="keyword">this</span>.allyName + <span class="string">" ]指挥部发送的紧急通知 : 队友[ "</span> + name + <span class="string">" ]正在遭受敌人攻击"</span>);</span><br><span class="line">        <span class="comment">//遍历观察者集合,调用每一个队友(除自己)的支援方法</span></span><br><span class="line">        <span class="keyword">for</span> (Observer player : players) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(player.getName().equalsIgnoreCase(name))) &#123;</span><br><span class="line">                player.help();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Observer接口 : 抽象观察者类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.observer_pattern.observer_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 抽象观察者类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/29/2019-12:05 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">help</span><span class="params">()</span></span>; <span class="comment">//声明支援盟友的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beAttacked</span><span class="params">(AllyControllerCenter allyControllerCenter)</span></span>; <span class="comment">//声明遭受攻击的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Player类 : 战队成员类, 充当具体观察者类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.observer_pattern.observer_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 战队成员类, 充当具体观察者类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/29/2019-12:21 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//支援盟友方法的实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">help</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"坚持住! 队友:[ "</span> + <span class="keyword">this</span>.name + <span class="string">" ]前来支援你"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遭受攻击方法的实现,当遭受攻击时将调用战队控制中心类的通知方法noifyObserver()来通知各个盟友</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beAttacked</span><span class="params">(AllyControllerCenter allyControllerCenter)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"队友: [ "</span> + <span class="keyword">this</span>.name + <span class="string">" ]正在被敌人攻击"</span>);</span><br><span class="line">        allyControllerCenter.noifyObserver(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Client类 : 客户端测试类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.observer_pattern.observer_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 客户端测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/29/2019-12:31 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义观察目标对象</span></span><br><span class="line">        AllyControllerCenter allyControllerCenter = <span class="keyword">new</span> ConcreteAllyControlCenter(<span class="string">"YU"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义四个观察者对象</span></span><br><span class="line">        Observer player1, player2, player3, player4;</span><br><span class="line">        player1 = <span class="keyword">new</span> Player(<span class="string">"player-A"</span>);</span><br><span class="line">        allyControllerCenter.join(player1);</span><br><span class="line">        player2 = <span class="keyword">new</span> Player(<span class="string">"player-B"</span>);</span><br><span class="line">        allyControllerCenter.join(player2);</span><br><span class="line">        player3 = <span class="keyword">new</span> Player(<span class="string">"player-C"</span>);</span><br><span class="line">        allyControllerCenter.join(player3);</span><br><span class="line">        player4 = <span class="keyword">new</span> Player(<span class="string">"player-D"</span>);</span><br><span class="line">        allyControllerCenter.join(player4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//player-A队友遭受敌人攻击</span></span><br><span class="line">        player1.beAttacked(allyControllerCenter); </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>示例程序的运行结果如下所示 :</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">------ 战队: [ YU ]组建成功 ------</span><br><span class="line">玩家: [ player-A ]加入战队</span><br><span class="line">玩家: [ player-B ]加入战队</span><br><span class="line">玩家: [ player-C ]加入战队</span><br><span class="line">玩家: [ player-D ]加入战队</span><br><span class="line">队友: [ player-A ]正在被敌人攻击</span><br><span class="line">战队: [ YU ]指挥部发送的紧急通知 : 队友[ player-A ]正在遭受敌人攻击</span><br><span class="line">坚持住! 队友:[ player-B ]前来支援你</span><br><span class="line">坚持住! 队友:[ player-C ]前来支援你</span><br><span class="line">坚持住! 队友:[ player-D ]前来支援你</span><br></pre></td></tr></table></figure></li></ol><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/28/Java设计模式之Observer-Pattern/Observer-Pattern-ClassDiagram1.png" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-Java设计模式之Observer-Pattern&quot;&gt;&lt;a href=&quot;#学习笔记-Java设计模式之Observer-Pattern&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : Java设计模式之Observer Pattern
      
    
    </summary>
    
    
      <category term="Java" scheme="https://yubuntu0109.github.io/tags/Java/"/>
    
      <category term="design and pattern" scheme="https://yubuntu0109.github.io/tags/design-and-pattern/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式之Proxy Pattern</title>
    <link href="https://yubuntu0109.github.io/2019/09/25/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8BProxy-Pattern/"/>
    <id>https://yubuntu0109.github.io/2019/09/25/Java设计模式之Proxy-Pattern/</id>
    <published>2019-09-25T12:25:51.000Z</published>
    <updated>2019-11-17T05:13:30.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-Java设计模式之Proxy-Pattern"><a href="#学习笔记-Java设计模式之Proxy-Pattern" class="headerlink" title="学习笔记 : Java设计模式之Proxy Pattern"></a>学习笔记 : Java设计模式之Proxy Pattern</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><em>代理模式 : 给某一个对象提供一个代理或占位符,并由代理对象来控制对原对象的访问. (Proxy Pattern : Provide a surrogate or placehodler for another object to access to it)</em></p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>代理模式是常用的结构型设计模式之一,当无法直接访问某个对象或访问某个对象存在困难时可以通过一个代理对象来间接访问,为了保证客户端使用的透明性,所访问的真实对象与代理对象需要实现相同的接口. 根据代理模式的使用目的不同,代理模式又可以分为多种类型,例如保护代理,远程代理,虚拟代理,缓冲代理等,它们应用于不同的场合,满足用户的不同需求.</p><h3 id="角色分析"><a href="#角色分析" class="headerlink" title="角色分析"></a>角色分析</h3><ol><li><em><code>Subject( 抽象主题角色 )</code> : 它声明了真实主题与代理主题的共同接口,既任何使用真实主题的地方都可以使用代理主题,客户端通常需要针对抽象主题角色进行编程.</em></li><li><em><code>Proxy( 代理主题角色 )</code> : 它包含了对真实主题的引用,既可以在任何时候操作真实主题对象. 在代理主题角色中提供了一个与真实主题角色相同的接口,以便在任何时候都可以替代真实主题. 代理主题角色还可以控制对真实主题的使用,负责在需要的时候创建和删除真实主题对象,并对真实主题对象的使用加以约束.</em></li><li><em><code>RealSubject( 真实主题角色 )</code> : 它定义了代理角色所代表的真实对象,在真实主题角色中实现了真实的业务操作,客户端可以通过代理主题角色间接调用真实主题角色中定义的操作.</em></li></ol><h3 id="示例程序-静态代理"><a href="#示例程序-静态代理" class="headerlink" title="示例程序-静态代理"></a>示例程序-静态代理</h3><p><em>下面是一个使用代理模式( 静态代理 )的简单示例程序 : 模拟实现某商务信息查询系统的部分功能 : ( 一 )在进行商务信息查询前用户需要通过身份验证,只有合法的用户才能够使用该查询系统. ( 二 )在进行商务信息查询时系统需要记录其查询日志,以便根据查询次数收取查询费用</em></p><ol><li><p><em>AccessValidator类 : 身份验证类(业务类), 它提供validate()方法来实现用户身份的验证</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.froxy_pattern.froxy_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 身份验证类(业务类), 它提供validate()方法来实现用户身份的验证</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/25/2019-12:53 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessValidator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟实现登录验证</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (userId.equalsIgnoreCase(<span class="string">"yubuntu0109"</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"ID为:[ "</span> + userId + <span class="string">" ]的用户登录成功"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"ID为:[ "</span> + userId + <span class="string">" ]的用户登录失败"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Logger类 : 日志记录类(业务类), 提供一个log()方法来保存日志信息</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.froxy_pattern.froxy_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 日志记录类(业务类), 提供一个log()方法来保存日志信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/25/2019-12:57 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟实现日志记录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"成功更新数据库信息,ID为:[ "</span> + userId + <span class="string">"+ ]的用户查询次数+1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Searcher接口 : 抽象查询类, 充当抽象主题角色</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.froxy_pattern.froxy_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 抽象查询类, 充当抽象主题角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/25/2019-1:00 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Searcher</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">doSearch</span><span class="params">(String userId, String keyWord)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>RealSearcher类 : 具体查询类, 充当真实主题角色, 它实现了查询功能</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.froxy_pattern.froxy_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 具体查询类, 充当真实主题角色, 它实现了查询功能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/25/2019-1:01 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSearcher</span> <span class="keyword">implements</span> <span class="title">Searcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟查询商务信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSearch</span><span class="params">(String userId, String keyWord)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ID为:[ "</span> + userId + <span class="string">" ]的用户使用关键字:[ "</span> + keyWord + <span class="string">" ]查询了商务信息"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"[ 这是用户所查询的商务信息结果 ]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>ProxySearcher类 : 代理查询类, 充当代码主题角色, 它是查询代理, 维持了对RealSearcher, AccessValidator, 及Logger对象的引用</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.froxy_pattern.froxy_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 代理查询类, 充当代码主题角色, 它是查询代理, 维持了对RealSearcher, AccessValidator, 及Logger对象的引用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/25/2019-1:05 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxySearcher</span> <span class="keyword">implements</span> <span class="title">Searcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RealSearcher realSearcher = <span class="keyword">new</span> RealSearcher(); <span class="comment">//维持一个对真实主题的引用</span></span><br><span class="line">    <span class="keyword">private</span> AccessValidator accessValidator;</span><br><span class="line">    <span class="keyword">private</span> Logger logger;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSearch</span><span class="params">(String userId, String keyWord)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果身份验证成功,则执行查询操作</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.validate(userId)) &#123;</span><br><span class="line">            String result = realSearcher.doSearch(userId, keyWord); <span class="comment">//调用真实主题的查询方法</span></span><br><span class="line">            <span class="keyword">this</span>.log(userId); <span class="comment">//记录查询日志</span></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建访问验证对象并调用其validate()方法来实现身份验证</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        accessValidator = <span class="keyword">new</span> AccessValidator();</span><br><span class="line">        <span class="keyword">return</span> accessValidator.validate(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建日志记录对象并调用其log()方法来实现日志记录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        logger = <span class="keyword">new</span> Logger();</span><br><span class="line">        logger.log(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Client类 : 客户端测试类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.froxy_pattern.froxy_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 客户端测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/25/2019-1:13 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Searcher searcher = <span class="keyword">new</span> ProxySearcher();</span><br><span class="line">        System.out.println(searcher.doSearch(<span class="string">"yubuntu0109"</span>, <span class="string">"design-patterns-in-java"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>示例程序的运行结果如下所示 :</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ID为:[ yubuntu0109 ]的用户登录成功</span><br><span class="line">ID为:[ yubuntu0109 ]的用户使用关键字:[ design-patterns-in-java ]查询了商务信息</span><br><span class="line">成功更新数据库信息,ID为:[ yubuntu0109+ ]的用户查询次数+1</span><br><span class="line">[ 这是用户所查询的商务信息结果 ]</span><br></pre></td></tr></table></figure></li></ol><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/25/Java设计模式之Proxy-Pattern/Froxy-Pattern-ClassDiagram1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="示例程序-动态代理"><a href="#示例程序-动态代理" class="headerlink" title="示例程序-动态代理"></a>示例程序-动态代理</h3><p><em>下面是一个使用代理模式( 动态代理 )的示例程序 : 模拟为某 OA 系统数据访问层( DAO )增加方法调用日志,既记录每一个方法被调用的开始及结束时间</em></p><ol><li><p><em>AbstractUserDao接口 : 抽象用户DAO类, 充当抽象主题角色</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.froxy_pattern.froxy_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 抽象用户DAO类, 充当抽象主题角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/25/2019-1:16 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractUserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">findUserById</span><span class="params">(String userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>AbstractDocumentDao接口 : 抽象文档DAO类, 充当抽象主题角色</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.froxy_pattern.froxy_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 抽象文档DAO类, 充当抽象主题角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/25/2019-1:17 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractDocumentDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">deleteDocumentById</span><span class="params">(String documentId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>DocumentDao类 : 文档DAO类, 充当具体主题角色</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.froxy_pattern.froxy_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 文档DAO类, 充当具体主题角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/25/2019-1:21 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocumentDao</span> <span class="keyword">implements</span> <span class="title">AbstractDocumentDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteDocumentById</span><span class="params">(String documentId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (documentId.equalsIgnoreCase(<span class="string">"Y001"</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"成功删除ID为:[ "</span> + documentId + <span class="string">" ]的文档信息"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"并未找到ID为:[ "</span> + documentId + <span class="string">" ]的文档信息"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>UserDao类 : 用户DAO类, 充当具体主题角色</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.froxy_pattern.froxy_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 用户DAO类, 充当具体主题角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/25/2019-1:18 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">implements</span> <span class="title">AbstractUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findUserById</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (userId.equalsIgnoreCase(<span class="string">"yubuntu0109"</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"成功查询ID为:[ "</span> + userId + <span class="string">" ]的用户信息"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"并未查询ID为:["</span> + userId + <span class="string">" ]的用户信息"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>DAOLogHandler类 : 自定义请求处理程序类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.froxy_pattern.froxy_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义请求处理程序类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/25/2019-1:24 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DAOLogHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DAOLogHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入一个需要提供代理的真实主题对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DAOLogHandler</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeInvoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"------&gt; invoke before: "</span> + <span class="keyword">new</span> Date().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterInvoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"------&gt; invoke after: "</span> + <span class="keyword">new</span> Date().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现invoke()方法,调用在真实主题类中定义的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        beforeInvoke();</span><br><span class="line">        Object result = method.invoke(object, args); <span class="comment">//转发调用</span></span><br><span class="line">        afterInvoke();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Client类 : 客户端测试类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.froxy_pattern.froxy_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 客户端测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/25/2019-1:29 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InvocationHandler handler = <span class="keyword">new</span> DAOLogHandler(<span class="keyword">new</span> UserDao());</span><br><span class="line">        AbstractUserDao proxy = (AbstractUserDao) Proxy.newProxyInstance(AbstractUserDao.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;AbstractUserDao.class&#125;, handler);</span><br><span class="line">        proxy.findUserById(<span class="string">"yubuntu0109"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        InvocationHandler handler2 = <span class="keyword">new</span> DAOLogHandler(<span class="keyword">new</span> DocumentDao());</span><br><span class="line">        AbstractDocumentDao proxy2 = (AbstractDocumentDao) Proxy.newProxyInstance(AbstractDocumentDao.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;AbstractDocumentDao.class&#125;, handler2);</span><br><span class="line">        proxy2.deleteDocumentById(<span class="string">"Y001"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>示例程序运行的结果如下所示 :</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">------&gt; invoke before: Fri Sep 27 14:05:06 CST 2019</span><br><span class="line">成功查询ID为:[ yubuntu0109 ]的用户信息</span><br><span class="line">------&gt; invoke after: Fri Sep 27 14:05:06 CST 2019</span><br><span class="line"></span><br><span class="line">------------------------------</span><br><span class="line"></span><br><span class="line">------&gt; invoke before: Fri Sep 27 14:05:06 CST 2019</span><br><span class="line">成功删除ID为:[ Y001 ]的文档信息</span><br><span class="line">------&gt; invoke after: Fri Sep 27 14:05:06 CST 2019</span><br></pre></td></tr></table></figure></li></ol><h4 id="示例程序的类图-1"><a href="#示例程序的类图-1" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/25/Java设计模式之Proxy-Pattern/Froxy-Pattern-ClassDiagram2.png" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-Java设计模式之Proxy-Pattern&quot;&gt;&lt;a href=&quot;#学习笔记-Java设计模式之Proxy-Pattern&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : Java设计模式之Proxy Pattern&quot;&gt;&lt;/a&gt;学习笔
      
    
    </summary>
    
    
      <category term="Java" scheme="https://yubuntu0109.github.io/tags/Java/"/>
    
      <category term="design and pattern" scheme="https://yubuntu0109.github.io/tags/design-and-pattern/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式之Command Pattern</title>
    <link href="https://yubuntu0109.github.io/2019/09/20/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8BCommand-Pattern/"/>
    <id>https://yubuntu0109.github.io/2019/09/20/Java设计模式之Command-Pattern/</id>
    <published>2019-09-20T16:56:53.000Z</published>
    <updated>2019-11-17T05:13:30.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-Java设计模式之Command-Pattern"><a href="#学习笔记-Java设计模式之Command-Pattern" class="headerlink" title="学习笔记 : Java设计模式之Command Pattern"></a>学习笔记 : Java设计模式之Command Pattern</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><em>命令模式 : 将一个请求封装为一个对象,从而可用不同的请求对客户进行参数化,对请求排队或者记录请求日志,以及支持可撤销的操作. ( Command Pattern : Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and undoable operations )</em></p><ul><li>扩 : 命令模式是一种对象行为型模式,其别名为动作( Action )模式或事物( Transaction )模式. 命令模式是常用的行为型模式之一,它将请求发送者与请求接收者<code>解耦</code>,请求发送者通过命令对象来间接引用接受者,使得系统具有更好的灵活性,可以在不修改现有系统源码代码的情况下让相同的发送者对应不同的接受者.</li></ul><h3 id="角色分析"><a href="#角色分析" class="headerlink" title="角色分析"></a>角色分析</h3><ol><li><em><code>Command( 抽象命令类 )</code> : 抽象命令类一般是一个抽象接类或接口,在其中声明了用于执行请求的 execute() 等方法,通过这些方法可以调用<code>请求接收者</code>的相关操作.</em></li><li><em><code>ConcreteCommand( 具体命令类 )</code> : 具体命令类是<code>抽象命令类</code>的子类,实现了在抽象命令类中声明的方法,它对应具体的<code>接收者</code>对象,将接收者对象的动作绑定其中. 具体命令类在实现 execute() 方法时将调用<code>接收者</code>对象的相关操作.</em></li><li><em><code>Invoker( 调用者 )</code> : 调用者既请求发送者,它通过命令对象来执行请求. 一个调用者并不需要在设计时确定其接收者,因此它只与抽象命令类之间存在关联关系. 在程序运行时可以将一个具体命令对象注入其中,再调用具体命令对象的 execute() 方法,从而实现间接调用<code>请求接收者</code>的相关操作.</em></li><li><em><code>Receiver( 接收者 )</code> : 接收者执行与请求相关的操作,具体实现对请求业务的处理.</em></li></ol><h3 id="示例程序-1"><a href="#示例程序-1" class="headerlink" title="示例程序-1"></a>示例程序-1</h3><p><em>下面是一个使用命令设计模式的简单程序案例,案例说明 : 某系统提供了一系列功能键,用户可以自定义功能键( FunctionButton )的功能,例如登录键( LoginInCommand )用于登录系统,退出键( LoginOutCommand )用于注销系统 · · ·</em></p><ol><li><p><em>FunctionButton类 : 功能键类, 充当请求调用者(请求发送者)</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.command_pattern.command_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 功能键类, 充当请求调用者(请求发送者)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/20/2019-8:59 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionButton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为功能键注入命令</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送请求的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Command抽象类 : 抽象命令类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.command_pattern.command_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 抽象命令类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/20/2019-9:01 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>LoginInCommand类 : 登录命令类, 充当具体命令类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.command_pattern.command_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 登录命令类, 充当具体命令类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/20/2019-9:07 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LoginInSystem enterSystem;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginInCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.enterSystem = <span class="keyword">new</span> LoginInSystem();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//命令执行方法,将调用请求接收者的业务方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        enterSystem.login();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>LoginOutCommand类 : 退出命令类, 充当具体命令类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.command_pattern.command_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 退出命令类, 充当具体命令类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/20/2019-9:05 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginOutCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LoginOutSystem exitSystem;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginOutCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.exitSystem = <span class="keyword">new</span> LoginOutSystem();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//命令执行方法,将调用请求接受者的业务方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        exitSystem.exit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>LoginInSystem类 : 登录系统的模拟实现类, 充当请求接收者</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.command_pattern.command_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 登录系统的模拟实现类, 充当请求接收者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/20/2019-9:10 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"login in"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>LoginOutSystem类 : 退出系统的模拟实现类, 充当请求接收者</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.command_pattern.command_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 退出系统的模拟实现类, 充当请求接收者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/20/2019-9:08 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginOutSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"login out"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Client类 : 客户端测试类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.command_pattern.command_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 客户端测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/20/2019-9:11 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FunctionButton functionButton = <span class="keyword">new</span> FunctionButton();</span><br><span class="line">        Command login_key = <span class="keyword">new</span> LoginInCommand();</span><br><span class="line">        functionButton.setCommand(login_key);</span><br><span class="line">        functionButton.click();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line"></span><br><span class="line">        Command exit_key = <span class="keyword">new</span> LoginOutCommand();</span><br><span class="line">        functionButton.setCommand(exit_key);</span><br><span class="line">        functionButton.click();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>示例程序运行的结果如下所示 :</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">login in</span><br><span class="line">--------------------</span><br><span class="line">login out</span><br></pre></td></tr></table></figure></li></ol><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/20/Java设计模式之Command-Pattern/Command-Pattern-ClassDiagram1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="示例程序-2"><a href="#示例程序-2" class="headerlink" title="示例程序-2"></a>示例程序-2</h3><p><em>下面是一个使用命令设计模式的简单程序案例,案例说明 : 设计一个画图软件,既用户可以通过拖动鼠标在画板上画画,点击 clear 按钮时会擦除画板上的痕迹.</em></p><ol><li><p><em>Command接口 : 表示”命令”的接口,充当(抽象)命令</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.command_pattern.command_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 表示"命令"的接口,充当(抽象)命令</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/20/2019-9:25 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>MacroCommand类 : 表示”由多条命令整合成的命令”的类,充当具体的命令</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.command_pattern.command_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 表示"由多条命令整合成的命令"的类,充当具体的命令</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/20/2019-9:27 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacroCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//命令的集合</span></span><br><span class="line">    <span class="keyword">private</span> Stack commands = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行命令</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Object command : commands) &#123;</span><br><span class="line">            ((Command) command).execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加命令</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">append</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (command != <span class="keyword">this</span>) &#123;</span><br><span class="line">            commands.push(command);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清除命令</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        commands.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>DrawCommand类 : 表示”绘制一个点的命令( 画笔 )”的类,充当具体的命令</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.command_pattern.command_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 表示"绘制一个点的命令"的类,充当具体的命令</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/20/2019-9:33 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制对象</span></span><br><span class="line">    <span class="keyword">protected</span> Drawable drawable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制位置</span></span><br><span class="line">    <span class="keyword">private</span> Point position;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DrawCommand</span><span class="params">(Drawable drawable, Point position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.drawable = drawable;</span><br><span class="line">        <span class="keyword">this</span>.position = position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行命令</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        drawable.draw(position.x, position.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Drawable接口 : 表示”绘制对象”的接口</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.command_pattern.command_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 表示"绘制对象"的接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/20/2019-9:37 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>DrawCanvas类 : 实现”绘制对象”的类,充当接收者</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.command_pattern.command_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 实现"绘制对象"的类,充当接收者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/20/2019-9:39 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawCanvas</span> <span class="keyword">extends</span> <span class="title">Canvas</span> <span class="keyword">implements</span> <span class="title">Drawable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//颜色</span></span><br><span class="line">    <span class="keyword">private</span> Color color = Color.green;</span><br><span class="line">    <span class="comment">//要绘制的圆点半径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> redius = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">//命令的历史记录</span></span><br><span class="line">    <span class="keyword">private</span> MacroCommand history;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DrawCanvas</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, MacroCommand history)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setSize(width, height);</span><br><span class="line">        <span class="keyword">this</span>.setBackground(Color.white);</span><br><span class="line">        <span class="keyword">this</span>.history = history;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重新全部绘制</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">repaint</span><span class="params">(Graphics graphics)</span> </span>&#123;</span><br><span class="line">        history.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        Graphics graphics = getGraphics();</span><br><span class="line">        graphics.setColor(color);</span><br><span class="line">        graphics.fillOval(x - redius, y - redius, redius * <span class="number">2</span>, redius * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Client类 : 客户端测试类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.command_pattern.command_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseMotionAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 客户端测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/20/2019-9:48 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制的历史记录</span></span><br><span class="line">    <span class="keyword">private</span> MacroCommand history = <span class="keyword">new</span> MacroCommand();</span><br><span class="line">    <span class="comment">//绘制区域(设置画板大小)</span></span><br><span class="line">    <span class="keyword">private</span> DrawCanvas canvas = <span class="keyword">new</span> DrawCanvas(<span class="number">600</span>, <span class="number">400</span>, history);</span><br><span class="line">    <span class="comment">//删除按钮</span></span><br><span class="line">    <span class="keyword">private</span> JButton clearButton = <span class="keyword">new</span> JButton(<span class="string">"clear"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(title);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        鼠标拖动事件</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        canvas.addMouseMotionListener(<span class="keyword">new</span> MouseMotionAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseDragged</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">                Command command = <span class="keyword">new</span> DrawCommand(canvas, e.getPoint());</span><br><span class="line">                history.append(command);</span><br><span class="line">                command.execute();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        动作监听事件</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        clearButton.addActionListener(e -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.getSource() == clearButton) &#123;</span><br><span class="line">                history.clear();</span><br><span class="line">                canvas.repaint();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        JFrame面板配置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        setLayout(<span class="keyword">new</span> BorderLayout());</span><br><span class="line">        add(clearButton, BorderLayout.NORTH);</span><br><span class="line">        add(canvas, BorderLayout.SOUTH);</span><br><span class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        pack();</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Client(<span class="string">"a simple drawing board"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>示例程序的运行结果如下图所示 :</em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/20/Java设计模式之Command-Pattern/Command-Pattern-ClassDiagram2-drawing.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ol><h4 id="示例程序的类图-1"><a href="#示例程序的类图-1" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/20/Java设计模式之Command-Pattern/Command-Pattern-ClassDiagram2.png" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-Java设计模式之Command-Pattern&quot;&gt;&lt;a href=&quot;#学习笔记-Java设计模式之Command-Pattern&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : Java设计模式之Command Pattern&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Java" scheme="https://yubuntu0109.github.io/tags/Java/"/>
    
      <category term="design and pattern" scheme="https://yubuntu0109.github.io/tags/design-and-pattern/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式之Builder Pattern</title>
    <link href="https://yubuntu0109.github.io/2019/09/17/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8BBuilder-Pattern/"/>
    <id>https://yubuntu0109.github.io/2019/09/17/Java设计模式之Builder-Pattern/</id>
    <published>2019-09-17T22:00:54.000Z</published>
    <updated>2019-11-17T05:13:30.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-Java设计模式之Builder-Pattern"><a href="#学习笔记-Java设计模式之Builder-Pattern" class="headerlink" title="学习笔记 : Java设计模式之Builder Pattern"></a>学习笔记 : Java设计模式之Builder Pattern</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><em>缔造者设计模式 : 将一个复杂对象的构建与它的表示分离,使得同样的构建过程可以创建不同的表示( Builder Pattern : Separate the construction of complex object from its representation so that the same construction process can create different representations )</em></p><ul><li>扩 : 建造者模式是一种对象创建型模式,它将客户端与包含多个部件的复杂对象的创建过程分离,客户端无需知道复杂对象的内部组成部分与装配方式,只需要知道所需建造者的类型即可.</li></ul><h3 id="建造者设计模式中的角色"><a href="#建造者设计模式中的角色" class="headerlink" title="建造者设计模式中的角色"></a>建造者设计模式中的角色</h3><ol><li><em><code>Builder( 抽象建造者 )</code> : 它为创建一个产品的各个部件指定抽象接口,在该接口中一般声明两类方法,一类方法是 buildPartX(),其用于创建复杂对象的各个部件. 另一类方法是 getResult(),其用于返回复杂对象. Builder 即可是抽象类,也可以是接口.</em></li><li><em><code>ConcreteBuilder( 具体建造者 )</code> : 它实现了 Builder 接口,实现了各个部件的具体构造和装配方法,定义并明确所创建的复杂对象,还可以提供一个用于返回创建好的复杂产品的方法( 该方法可以由抽象构建者实现 ).</em></li><li><em><code>Product( 产品 )</code> : 它是被创建的复杂对象,包含多个组成部件,具体建造者创建该产品的内部表示并定义它的装配过程.</em></li><li><em><code>Director( 指挥者 )</code> : 指挥者又称为导演类,它负责安排复杂对象的建造次序,指挥者与抽象构建者之间存在关联关系,可以在其 construct() 建造方法中调用建造者对象的部件构造与装配方法,完成复杂对象的建造.</em></li></ol><h3 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h3><p><em>下面是一个使用了建造者设计模式的简单示例程序,其概述为 : 无论是何种游戏角色,都需要逐步创建其组成部分,再将各组成部分配装成一个完整的游戏角色.</em></p><ol><li><p><em>Actor类 : 游戏角色类, 充当复杂产品对象</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.builder_pattern.builder_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 游戏角色类, 充当复杂产品对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/19/2019-1:30 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String type; <span class="comment">//角色类型</span></span><br><span class="line">    <span class="keyword">private</span> String sex; <span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">private</span> String face; <span class="comment">//脸型</span></span><br><span class="line">    <span class="keyword">private</span> String costume; <span class="comment">//服装</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> face;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFace</span><span class="params">(String face)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.face = face;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCostume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> costume;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCostume</span><span class="params">(String costume)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.costume = costume;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Actor&#123;"</span> +</span><br><span class="line">                <span class="string">"type='"</span> + type + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", face='"</span> + face + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", costume='"</span> + costume + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>ActorBuilder抽象类 : 游戏角色建造者, 充当抽象建造者</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.builder_pattern.builder_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 游戏角色建造者, 充当抽象建造者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/19/2019-1:39 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ActorBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Actor actor = <span class="keyword">new</span> Actor();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildSex</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildFace</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildCostume</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工厂方法,返回一个完整的游戏角色对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Actor <span class="title">createActor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> actor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>HeroBuilder类 : 英雄角色建造者, 充当具体建造者</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.builder_pattern.builder_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 英雄角色建造者, 充当具体建造者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/19/2019-1:42 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroBuilder</span> <span class="keyword">extends</span> <span class="title">ActorBuilder</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        actor.setType(<span class="string">"英雄"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        actor.setSex(<span class="string">"男"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildFace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        actor.setFace(<span class="string">"英俊"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildCostume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        actor.setCostume(<span class="string">"盔甲"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>AngelBuilder类 : 天使角色建造者, 充当具体建造类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.builder_pattern.builder_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 天使角色建造者, 充当具体建造类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/19/2019-1:44 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AngelBuilder</span> <span class="keyword">extends</span> <span class="title">ActorBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        actor.setType(<span class="string">"天使"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        actor.setSex(<span class="string">"女"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildFace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        actor.setFace(<span class="string">"漂亮"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildCostume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        actor.setCostume(<span class="string">"裙子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>ActorController类 : 角色控制器, 充当指挥者</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.builder_pattern.builder_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 角色控制器, 充当指挥者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/19/2019-1:46 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//逐步构建复杂产品对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Actor <span class="title">construct</span><span class="params">(ActorBuilder actorBuilder)</span> </span>&#123;</span><br><span class="line">        Actor actor;</span><br><span class="line">        actorBuilder.buildType();</span><br><span class="line">        actorBuilder.buildSex();</span><br><span class="line">        actorBuilder.buildFace();</span><br><span class="line">        actorBuilder.buildCostume();</span><br><span class="line">        actor = actorBuilder.createActor();</span><br><span class="line">        <span class="keyword">return</span> actor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Client类 : 客户端测试类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.builder_pattern.builder_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 客户端测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/19/2019-1:49 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ActorController actorController = <span class="keyword">new</span> ActorController();</span><br><span class="line"></span><br><span class="line">        ActorBuilder zero = <span class="keyword">new</span> HeroBuilder();</span><br><span class="line">        Actor actor_zero = actorController.construct(zero);</span><br><span class="line">        System.out.println(actor_zero);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        ActorBuilder angel = <span class="keyword">new</span> AngelBuilder();</span><br><span class="line">        Actor actor_angel = actorController.construct(angel);</span><br><span class="line">        System.out.println(actor_angel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>示例程序的运行结果如下所示 :</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Actor&#123;type=&apos;英雄&apos;, sex=&apos;男&apos;, face=&apos;英俊&apos;, costume=&apos;盔甲&apos;&#125;</span><br><span class="line">------------------------------</span><br><span class="line">Actor&#123;type=&apos;天使&apos;, sex=&apos;女&apos;, face=&apos;漂亮&apos;, costume=&apos;裙子&apos;&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/17/Java设计模式之Builder-Pattern/Builder-Pattern-ClassDiagram1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="示例程序-简化版"><a href="#示例程序-简化版" class="headerlink" title="示例程序-简化版"></a>示例程序-简化版</h3><p><em>为了简化系统结构,可以将 Director 和抽象建造者 Builder 进行合并,在 Builder 中提供逐步构建复杂产品对象的 construct() 方法. 由于 Builder 类通常是抽象类,因此可以将 construct() 方法定义为静态方法,以便客户端能够直接调用. 除此之外还有一种更简单的处理方法,既将 construct() 方法中的参数去掉,直接在construct()方法中调用 buildPartX() 方法.( 以下示例程序是基于上述示例程序进行简化的 )</em></p><ol><li><p><em>Actor类 : 游戏角色类, 充当复杂产品对象</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.builder_pattern.builder_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 游戏角色类, 充当复杂产品对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/19/2019-1:30 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String type; <span class="comment">//角色类型</span></span><br><span class="line">    <span class="keyword">private</span> String sex; <span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">private</span> String face; <span class="comment">//脸型</span></span><br><span class="line">    <span class="keyword">private</span> String costume; <span class="comment">//服装</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> face;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFace</span><span class="params">(String face)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.face = face;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCostume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> costume;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCostume</span><span class="params">(String costume)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.costume = costume;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Actor&#123;"</span> +</span><br><span class="line">                <span class="string">"type='"</span> + type + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", face='"</span> + face + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", costume='"</span> + costume + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>ActorBuilder抽象类 : 游戏角色建造者, 充当抽象建造者(省略Director并简化construct方法)</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.builder_pattern.builder_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 游戏角色建造者, 充当抽象建造者(省略Director并简化construct方法)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/19/2019-1:39 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ActorBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Actor actor = <span class="keyword">new</span> Actor();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildSex</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildFace</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildCostume</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工厂方法,返回一个完整的游戏角色对象</span></span><br><span class="line">    <span class="comment">//public Actor createActor() &#123;</span></span><br><span class="line">    <span class="comment">//    return actor;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//逐步构建复杂产品对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Actor <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.buildType();</span><br><span class="line">        <span class="keyword">this</span>.buildSex();</span><br><span class="line">        <span class="keyword">this</span>.buildFace();</span><br><span class="line">        <span class="keyword">this</span>.buildCostume();</span><br><span class="line">        <span class="keyword">return</span> actor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>HeroBuilder类 : 英雄角色建造者, 充当具体建造者</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.builder_pattern.builder_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 英雄角色建造者, 充当具体建造者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/19/2019-1:42 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroBuilder</span> <span class="keyword">extends</span> <span class="title">ActorBuilder</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        actor.setType(<span class="string">"英雄"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        actor.setSex(<span class="string">"男"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildFace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        actor.setFace(<span class="string">"英俊"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildCostume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        actor.setCostume(<span class="string">"盔甲"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>AngelBuilder类 : 天使角色建造者, 充当具体建造类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.builder_pattern.builder_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 天使角色建造者, 充当具体建造类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/19/2019-1:44 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AngelBuilder</span> <span class="keyword">extends</span> <span class="title">ActorBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        actor.setType(<span class="string">"天使"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        actor.setSex(<span class="string">"女"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildFace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        actor.setFace(<span class="string">"漂亮"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildCostume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        actor.setCostume(<span class="string">"裙子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Client类 : 客户端测试类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.builder_pattern.builder_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 客户端测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/19/2019-1:49 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Actor zero = <span class="keyword">new</span> HeroBuilder().construct();</span><br><span class="line">        System.out.println(zero);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        Actor angel = <span class="keyword">new</span> AngelBuilder().construct();</span><br><span class="line">        System.out.println(angel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>示例程序的运行结果如下所示 :</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Actor&#123;type=&apos;英雄&apos;, sex=&apos;男&apos;, face=&apos;英俊&apos;, costume=&apos;盔甲&apos;&#125;</span><br><span class="line">------------------------------</span><br><span class="line">Actor&#123;type=&apos;天使&apos;, sex=&apos;女&apos;, face=&apos;漂亮&apos;, costume=&apos;裙子&apos;&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="示例程序的类图-1"><a href="#示例程序的类图-1" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/17/Java设计模式之Builder-Pattern/Builder-Pattern-ClassDiagram2.png" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-Java设计模式之Builder-Pattern&quot;&gt;&lt;a href=&quot;#学习笔记-Java设计模式之Builder-Pattern&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : Java设计模式之Builder Pattern&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="design and pattern" scheme="https://yubuntu0109.github.io/tags/design-and-pattern/"/>
    
      <category term="java" scheme="https://yubuntu0109.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式之Facade Pattern</title>
    <link href="https://yubuntu0109.github.io/2019/09/12/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8BFacade-Pattern/"/>
    <id>https://yubuntu0109.github.io/2019/09/12/Java设计模式之Facade-Pattern/</id>
    <published>2019-09-12T21:21:41.000Z</published>
    <updated>2019-11-17T05:13:30.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-Java设计模式之Facade-Pattern"><a href="#学习笔记-Java设计模式之Facade-Pattern" class="headerlink" title="学习笔记 : Java设计模式之Facade Pattern"></a>学习笔记 : Java设计模式之Facade Pattern</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><em>为子系统中的一组接口提供一个统一的入口. 外观模式定义了一个高层接口,这个接口使得这一子系统更加容易使用. ( Facade Pattern : Provide a unified interface to a set of interfaces in a subsystem. Facade defines a highter-level interface that makes the subsystem easier to use. )</em></p><ul><li>扩 : 外观模式又称门面模式,它是一种对象结构型模式. 外观模式是<code>迪米特法则</code>的一种具体实现,通过引入一个新的外观角色来降低原有系统的复杂度,同时降低客户类与子系统的耦合度.</li></ul><h3 id="外观设计模式中使用的角色"><a href="#外观设计模式中使用的角色" class="headerlink" title="外观设计模式中使用的角色"></a>外观设计模式中使用的角色</h3><ol><li><em><code>Facade( 外观角色 )</code> : 在客户端可以调用它的方法,在外观角色中知道相关的( 一个或多个 )子系统的功能和责任. 在正常情况下,它将所有从客户端发来的请求委派到相应的子系统,传递给相应的子系统对象处理.</em></li><li><em><code>SubSystem( 子系统角色 )</code> : 在软件系统中有一个或者多个子系统角色,每一个子系统可以不是一个单独的类,而是一个类的集合,它实现了子系统的功能. 每一个子系统都可以被客户端直接调用,或者被外观角色调用,它处理由外观类传递过来的请求. 子系统并不知道外观类的存在,对于子系统而言,外观角色仅仅是另外一个客户端而已.</em></li></ol><ul><li>扩 : 外观模式中所指的子系统是一个广义的概念,它可以是一个类,一个功能模块,系统的一个组成部分或者一个完整的系统. 通常所指一些业务类,实现了一些具体的,独立的业务功能.</li></ul><h3 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h3><p><em>下面是一个使用外观设计模式的简单示例程序 : 写一个用于文件加密的模块,该模块的功能为对指定文件中的数据进行加密并将加密之后的数据保存到新的文件中. 具体流程包括三个部分 : 读取源文件中的数据, 数据加密, 将加密后的数据写入到新文件</em></p><ol><li><p><em>FileReader类 : 文件读取类, 充当子系统类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.facade_pattern.facade_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 文件读取类, 充当子系统类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/12/2019-9:36 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> stringBuffer = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">try</span> (<span class="keyword">var</span> fileInputStream = <span class="keyword">new</span> FileInputStream(path)) &#123;</span><br><span class="line">            <span class="keyword">var</span> data = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((data = fileInputStream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                stringBuffer.append((<span class="keyword">char</span>) data); <span class="comment">//char</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>CipherMachine类 : 数据加密类(求模运算), 充当子系统类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.facade_pattern.facade_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 数据加密类(求模运算), 充当子系统类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/12/2019-9:42 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CipherMachine</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encrypt</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; text.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> s = String.valueOf(text.charAt(i) % <span class="number">7</span>);</span><br><span class="line">            result.append(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>FileWriter类 : 文件保存类, 充当子类系统类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.facade_pattern.facade_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 文件保存类, 充当子类系统类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/12/2019-9:56 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileWriter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String encryptStr, String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="keyword">var</span> fileOutputStream = <span class="keyword">new</span> FileOutputStream(path)) &#123;</span><br><span class="line">            fileOutputStream.write(encryptStr.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>EncryptFacade类 : 加密外观类, 充当外观类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.facade_pattern.facade_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 加密外观类, 充当外观类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/12/2019-9:59 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptFacade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//维持对子系统对象的引用</span></span><br><span class="line">    <span class="keyword">private</span> FileReader fileReader;</span><br><span class="line">    <span class="keyword">private</span> CipherMachine cipherMachine;</span><br><span class="line">    <span class="keyword">private</span> FileWriter fileWriter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EncryptFacade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fileReader = <span class="keyword">new</span> FileReader();</span><br><span class="line">        cipherMachine = <span class="keyword">new</span> CipherMachine();</span><br><span class="line">        fileWriter = <span class="keyword">new</span> FileWriter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用子系统对象的业务方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileEncrypt</span><span class="params">(String fromPath, String toPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> text = fileReader.read(fromPath);</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; : 读取文件[ "</span> + fromPath + <span class="string">" ]中的明文数据 : "</span> + text);</span><br><span class="line">        <span class="keyword">var</span> encryptStr = cipherMachine.encrypt(text);</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; : 明文数据加密后的结果 : "</span> + encryptStr);</span><br><span class="line">        fileWriter.write(encryptStr, toPath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Client类 : 客户端测试类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.facade_pattern.facade_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 客户端测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/14/2019-6:05 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FROM_PATH = <span class="string">"src\\main\\java\\pers\\huangyuhui\\facade_pattern\\facade_pattern_1\\from.txt"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TO_PATH = <span class="string">"src\\main\\java\\pers\\huangyuhui\\facade_pattern\\facade_pattern_1\\to.txt"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EncryptFacade encryptFacade = <span class="keyword">new</span> EncryptFacade();</span><br><span class="line">        encryptFacade.fileEncrypt(FROM_PATH, TO_PATH);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>from.txt : 源文件,用于存储待加密的数据</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YUbuntu0109</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下所示 :</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; : 读取文件[ src\main\java\pers\huangyuhui\facade_pattern\facade_pattern_1\from.txt ]中的明文数据 : YUbuntu0109</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; : 明文数据加密后的结果 : 51055456061</span><br></pre></td></tr></table></figure></li><li><p><em>to.txt : 目标文件,用于存储加密后的数据( 程序运行后的该文件中的内容如下所示 )</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">51055456061</span><br></pre></td></tr></table></figure></li></ol><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/12/Java设计模式之Facade-Pattern/Facade-Pattern-ClassDiagram1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="示例程序-抽象外观类"><a href="#示例程序-抽象外观类" class="headerlink" title="示例程序-抽象外观类"></a>示例程序-抽象外观类</h3><p><em>在标准的外观模式结构中,如果需要增加,删除或更换与外观类交互的子类,必须修改外观类或客户端的代码,这将违背<code>开闭原则</code>,因此可以通过引入抽象外观类对系统进行改进,即客户端针对抽象外观类进行编程,在运行时再确定具体的外观类. ( 下述示例程序是在上述示例程序基础上进行改进的 )</em></p><ol><li><p><em>FileReader类 : 文件读取类, 充当子系统类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.facade_pattern.facade_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 文件读取类, 充当子系统类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/12/2019-9:36 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> stringBuffer = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">try</span> (<span class="keyword">var</span> fileInputStream = <span class="keyword">new</span> FileInputStream(path)) &#123;</span><br><span class="line">            <span class="keyword">var</span> data = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((data = fileInputStream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                stringBuffer.append((<span class="keyword">char</span>) data); <span class="comment">//char</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>FileWriter类 : 文件保存类, 充当子类系统类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.facade_pattern.facade_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 文件保存类, 充当子类系统类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/12/2019-9:56 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileWriter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String encryptStr, String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="keyword">var</span> fileOutputStream = <span class="keyword">new</span> FileOutputStream(path)) &#123;</span><br><span class="line">            fileOutputStream.write(encryptStr.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>CipherMachine类 : 数据加密类(求模运算), 充当子系统类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.facade_pattern.facade_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 数据加密类(求模运算), 充当子系统类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/12/2019-9:42 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CipherMachine</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encrypt</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; text.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> s = String.valueOf(text.charAt(i) % <span class="number">7</span>);</span><br><span class="line">            result.append(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>NewCipherMachine类 : 数据加密类(移位运算), 充当子系统类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.facade_pattern.facade_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 数据加密类(移位运算), 充当子系统类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/14/2019-6:59 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewCipherMachine</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encrypt</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">var</span> key = <span class="number">10</span>; <span class="comment">//设置密钥,移位数为10</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; text.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> c = text.charAt(i);</span><br><span class="line">            <span class="comment">//小写字母移位</span></span><br><span class="line">            <span class="keyword">if</span> (c &gt;= <span class="string">'a'</span> &amp;&amp; c &lt;= <span class="string">'z'</span>) &#123;</span><br><span class="line">                c += key % <span class="number">26</span>;</span><br><span class="line">                <span class="keyword">if</span> (c &gt; <span class="string">'z'</span>) &#123;</span><br><span class="line">                    c -= <span class="number">26</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (c &lt; <span class="string">'a'</span>) &#123;</span><br><span class="line">                    c += <span class="number">26</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//大写字母移位</span></span><br><span class="line">            <span class="keyword">if</span> (c &gt;= <span class="string">'A'</span> &amp;&amp; c &lt;= <span class="string">'Z'</span>) &#123;</span><br><span class="line">                c += key % <span class="number">26</span>;</span><br><span class="line">                <span class="keyword">if</span> (c &gt; <span class="string">'Z'</span>) &#123;</span><br><span class="line">                    c -= <span class="number">26</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (c &lt; <span class="string">'A'</span>) &#123;</span><br><span class="line">                    c += <span class="number">26</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                result += c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>AbstractEncryptFacade抽象类 : 明文加密抽象类, 充当抽象外观类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.facade_pattern.facade_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 明文加密抽象类, 充当抽象外观类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/14/2019-6:54 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractEncryptFacade</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fileEncrypt</span><span class="params">(String fromPath, String toPath)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>EncryptFacade类 : 加密外观类, 充当外观类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.facade_pattern.facade_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 加密外观类, 充当外观类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/12/2019-9:59 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptFacade</span> <span class="keyword">extends</span> <span class="title">AbstractEncryptFacade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//维持对子系统对象的引用</span></span><br><span class="line">    <span class="keyword">private</span> FileReader fileReader;</span><br><span class="line">    <span class="keyword">private</span> CipherMachine cipherMachine;</span><br><span class="line">    <span class="keyword">private</span> FileWriter fileWriter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EncryptFacade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fileReader = <span class="keyword">new</span> FileReader();</span><br><span class="line">        cipherMachine = <span class="keyword">new</span> CipherMachine();</span><br><span class="line">        fileWriter = <span class="keyword">new</span> FileWriter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用子系统对象的业务方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileEncrypt</span><span class="params">(String fromPath, String toPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> text = fileReader.read(fromPath);</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; : 读取文件[ "</span> + fromPath + <span class="string">" ]中的明文数据 : "</span> + text);</span><br><span class="line">        <span class="keyword">var</span> encryptStr = cipherMachine.encrypt(text);</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; : 明文数据加密后的结果 : "</span> + encryptStr);</span><br><span class="line">        fileWriter.write(encryptStr, toPath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>NewEncryptFacade类 : 加密外观类, 充当外观类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.facade_pattern.facade_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 加密外观类, 充当外观类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/14/2019-6:57 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewEncryptFacade</span> <span class="keyword">extends</span> <span class="title">AbstractEncryptFacade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FileReader reader;</span><br><span class="line">    <span class="keyword">private</span> NewCipherMachine newCipherMachine;</span><br><span class="line">    <span class="keyword">private</span> FileWriter writer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NewEncryptFacade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">        newCipherMachine = <span class="keyword">new</span> NewCipherMachine();</span><br><span class="line">        writer = <span class="keyword">new</span> FileWriter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用子系统对象的业务方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileEncrypt</span><span class="params">(String fromPath, String toPath)</span> </span>&#123;</span><br><span class="line">        String text = reader.read(fromPath);</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; : 读取文件[ "</span> + fromPath + <span class="string">" ]中的明文数据 : "</span> + text);</span><br><span class="line">        String encryptStr = newCipherMachine.encrypt(text);</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; : 明文数据加密后的结果 : "</span> + encryptStr);</span><br><span class="line">        writer.write(encryptStr, toPath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Client类 : 客户端测试类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.facade_pattern.facade_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 客户端测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/14/2019-6:05 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FROM_PATH = <span class="string">"src\\main\\java\\pers\\huangyuhui\\facade_pattern\\facade_pattern_2\\from.txt"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TO_PATH = <span class="string">"src\\main\\java\\pers\\huangyuhui\\facade_pattern\\facade_pattern_2\\to.txt"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//取模运算加密</span></span><br><span class="line">        AbstractEncryptFacade encryptFacade = <span class="keyword">new</span> EncryptFacade();</span><br><span class="line">        encryptFacade.fileEncrypt(FROM_PATH, TO_PATH);</span><br><span class="line">        <span class="comment">//移位运算加密</span></span><br><span class="line">        AbstractEncryptFacade newEncryptFacade = <span class="keyword">new</span> NewEncryptFacade();</span><br><span class="line">        newEncryptFacade.fileEncrypt(FROM_PATH, TO_PATH);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>from.txt : 源文件,用于存储待加密的数据</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YUbuntu0109</span><br></pre></td></tr></table></figure></li><li><p><em>to.txt : 目标文件,用于存储加密后的数据( 程序运行后的该文件中的内容如下所示 )</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IE</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下所示 :</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; : 读取文件[ src\main\java\pers\huangyuhui\facade_pattern\facade_pattern_2\from.txt ]中的明文数据 : YUbuntu0109</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; : 明文数据加密后的结果 : 51055456061</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; : 读取文件[ src\main\java\pers\huangyuhui\facade_pattern\facade_pattern_2\from.txt ]中的明文数据 : YUbuntu0109</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; : 明文数据加密后的结果 : IE</span><br></pre></td></tr></table></figure></li></ol><h4 id="示例程序的类图-1"><a href="#示例程序的类图-1" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/12/Java设计模式之Facade-Pattern/Facade-Pattern-ClassDiagram2.png" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-Java设计模式之Facade-Pattern&quot;&gt;&lt;a href=&quot;#学习笔记-Java设计模式之Facade-Pattern&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : Java设计模式之Facade Pattern&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="Java" scheme="https://yubuntu0109.github.io/tags/Java/"/>
    
      <category term="design and pattern" scheme="https://yubuntu0109.github.io/tags/design-and-pattern/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式之Composite Pattern</title>
    <link href="https://yubuntu0109.github.io/2019/09/11/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8BComposite-Pattern/"/>
    <id>https://yubuntu0109.github.io/2019/09/11/Java设计模式之Composite-Pattern/</id>
    <published>2019-09-11T12:11:29.000Z</published>
    <updated>2019-11-17T05:13:30.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-Java设计模式之Composite-Pattern"><a href="#学习笔记-Java设计模式之Composite-Pattern" class="headerlink" title="学习笔记 : Java设计模式之Composite Pattern"></a>学习笔记 : Java设计模式之Composite Pattern</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><em><code>组合设计模式</code> : 组合多个对象形成树形结构以表示具有<code>部分-整体</code>关系的层次结构. 组合模式让客户端可以统一对待单个对象和组合对象. (Composite Pattern : Compose objects into tree structures to pepresent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uninformly.)</em></p><ul><li>扩 : 组合模式又称<code>部分-整体( Part-Whole )</code>模式,属于对象结构型模式,它将对象组织到树形结构中,可以用来描述整体与部分的关系</li></ul><h3 id="组合模式中的角色"><a href="#组合模式中的角色" class="headerlink" title="组合模式中的角色"></a>组合模式中的角色</h3><ol><li><em><code>Component( 抽象构件 )</code> : 它可以是接口或抽象类,为叶子构件和容器构件对象声明接口,在该角色中可以包含所有子类共有行为的声明和实现. 在抽象构件中定义了访问及管理它的子构件的方法,如增加,删除,获取子构件等.</em></li><li><em><code>Leaf( 叶子构件 )</code> : 它在组合结构中表示叶子结点对象,叶子节点没有子结点,它实现了在抽象构件中定义的行为. 对于那些访问及管理子构件的方法,可以通过抛出异常,提示错误等方式进行处理.</em></li><li><em><code>Composite( 容器构件 )</code> : 它在组合结构中表示容器节点对象,<code>容器结点包含子结点,其子结点可以是叶子结点,也可以是容器结点</code>,它提供了一个集合用于存储子结点,实现了在抽象构件中定义的行为,包括哪些访问及管理子构件的方法,在其业务方法中可以递归调用其自子结点的业务方法.</em></li></ol><ul><li>扩 : 组合模式的关键在于定义了一个抽象构件类,它既可以代表<code>叶子</code>,又可以代表<code>容器</code>,客户端针对该抽象构件类进行编程,无须知道它到底表示的叶子还是容器,可以对其进行统一处理. 同时容器对象与抽象构件类之间还建立一个<code>聚合关联关系</code>,在容器对象中既可以包含叶子,又可以包含容器,以此实现递归组合,形成一个<code>树形结构</code>.</li></ul><h3 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h3><p><em>Java SE中的 AWT 和 Swing 包的设计就基于组合模式,在这些界面包中为用户提供了大量的容器构件,如 Container( 容器构件 ) 和成员构件,如 Checkbox, Button, TextComponent( 一些叶子构件 )等,其都继承自 Componet 抽象类( 抽象构件 )</em></p><h3 id="示例程序1"><a href="#示例程序1" class="headerlink" title="示例程序1"></a>示例程序1</h3><p><em>下面是一个使用组合设计模式的简单示例程序,这段示例程序的功能为列出文件夹及其中文件的名称及大小~</em></p><ol><li><p><em>Entry抽象类 : 表示目录条目的抽象类, 充当Component角色</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.composite_pattern.composite_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 表示目录条目的抽象类, 充当Component角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/11/2019-12:16 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Entry <span class="title">add</span><span class="params">(Entry entry)</span> <span class="keyword">throws</span> FileTreatMentException </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> FileTreatMentException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        printList(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">printList</span><span class="params">(String prefix)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getName() + <span class="string">" ("</span> + getSize() + <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>File类 : 表示文件的类, 充当Leaf角色</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.composite_pattern.composite_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 表示文件的类, 充当Leaf角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/11/2019-12:22 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">File</span> <span class="keyword">extends</span> <span class="title">Entry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(String name, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printList</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        System.out.println(prefix + <span class="string">"/"</span> + <span class="keyword">this</span>.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Directory类 : 表示文件夹的类, 充当Composite角色</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.composite_pattern.composite_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 表示文件夹的类, 充当Composite角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/11/2019-12:25 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Directory</span> <span class="keyword">extends</span> <span class="title">Entry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Entry&gt; directory = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Directory</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Entry entry : directory) &#123;</span><br><span class="line">            size += entry.getSize();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Entry <span class="title">add</span><span class="params">(Entry entry)</span> </span>&#123;</span><br><span class="line">        directory.add(entry);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printList</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        System.out.println(prefix + <span class="string">"/"</span> + <span class="keyword">this</span>.toString());</span><br><span class="line">        <span class="keyword">for</span> (Entry entry : directory) &#123;</span><br><span class="line">            entry.printList(prefix + <span class="string">"/"</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>FileTreatMentException类 : 自定义异常类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.composite_pattern.composite_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义异常类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/11/2019-12:19 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTreatMentException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileTreatMentException</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileTreatMentException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Client类 : 客户端测试类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.composite_pattern.composite_pattern_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 客户端测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/11/2019-12:36 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"------ Making Root Entries ------"</span>);</span><br><span class="line">            Directory rootdir = <span class="keyword">new</span> Directory(<span class="string">"root"</span>);</span><br><span class="line">            Directory bindir = <span class="keyword">new</span> Directory(<span class="string">"bin"</span>);</span><br><span class="line">            Directory temdir = <span class="keyword">new</span> Directory(<span class="string">"tmp"</span>);</span><br><span class="line">            Directory usrdir = <span class="keyword">new</span> Directory(<span class="string">"usr"</span>);</span><br><span class="line">            rootdir.add(bindir);</span><br><span class="line">            rootdir.add(temdir);</span><br><span class="line">            rootdir.add(usrdir);</span><br><span class="line">            bindir.add(<span class="keyword">new</span> File(<span class="string">"demo1.class"</span>, <span class="number">10000</span>));</span><br><span class="line">            bindir.add(<span class="keyword">new</span> File(<span class="string">"demo2.class"</span>, <span class="number">20000</span>));</span><br><span class="line">            rootdir.printList();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"\n"</span> + <span class="string">"------ Making User Entries ------"</span>);</span><br><span class="line">            Directory demoDir1 = <span class="keyword">new</span> Directory(<span class="string">"demoDir1"</span>);</span><br><span class="line">            Directory demoDir2 = <span class="keyword">new</span> Directory(<span class="string">"demoDir2"</span>);</span><br><span class="line">            Directory demoDir3 = <span class="keyword">new</span> Directory(<span class="string">"demoDir3"</span>);</span><br><span class="line">            usrdir.add(demoDir1);</span><br><span class="line">            usrdir.add(demoDir2);</span><br><span class="line">            usrdir.add(demoDir3);</span><br><span class="line">            demoDir1.add(<span class="keyword">new</span> File(<span class="string">"demo.html"</span>, <span class="number">100</span>));</span><br><span class="line">            demoDir1.add(<span class="keyword">new</span> File(<span class="string">"demo.java"</span>, <span class="number">200</span>));</span><br><span class="line">            demoDir2.add(<span class="keyword">new</span> File(<span class="string">"demo.txt"</span>, <span class="number">300</span>));</span><br><span class="line">            demoDir3.add(<span class="keyword">new</span> File(<span class="string">"demo.doc"</span>, <span class="number">400</span>));</span><br><span class="line">            demoDir3.add(<span class="keyword">new</span> File(<span class="string">"demo.mail"</span>, <span class="number">500</span>));</span><br><span class="line">            rootdir.printList();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileTreatMentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下所示 :</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">------ Making Root Entries ------</span><br><span class="line">/root (30000)</span><br><span class="line">/root/bin (30000)</span><br><span class="line">/root/bin/demo1.class (10000)</span><br><span class="line">/root/bin/demo2.class (20000)</span><br><span class="line">/root/tmp (0)</span><br><span class="line">/root/usr (0)</span><br><span class="line"></span><br><span class="line">------ Making User Entries ------</span><br><span class="line">/root (31500)</span><br><span class="line">/root/bin (30000)</span><br><span class="line">/root/bin/demo1.class (10000)</span><br><span class="line">/root/bin/demo2.class (20000)</span><br><span class="line">/root/tmp (0)</span><br><span class="line">/root/usr (1500)</span><br><span class="line">/root/usr/demoDir1 (300)</span><br><span class="line">/root/usr/demoDir1/demo.html (100)</span><br><span class="line">/root/usr/demoDir1/demo.java (200)</span><br><span class="line">/root/usr/demoDir2 (300)</span><br><span class="line">/root/usr/demoDir2/demo.txt (300)</span><br><span class="line">/root/usr/demoDir3 (900)</span><br><span class="line">/root/usr/demoDir3/demo.doc (400)</span><br><span class="line">/root/usr/demoDir3/demo.mail (500)</span><br></pre></td></tr></table></figure></li></ol><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/11/Java设计模式之Composite-Pattern/Composite-Pattern-ClassDiagram1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="示例程序2"><a href="#示例程序2" class="headerlink" title="示例程序2"></a>示例程序2</h3><p><em>下面是一个使用组合设计模式的简单示例程序 : 写一个模拟杀毒( Antivirus )程序,该程序既可以对某个文件夹( Folder )杀毒,也可以对某个指定的文件( File )杀毒,而且该杀毒程序还可以根据各类文件的特点为不同类型(文本文件,图像文件,音频文件等)的文件提供不同的杀毒方式.</em></p><ol><li><p><em>AbstractFile抽象类 : 抽象文件类, 充当抽象构件类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.composite_pattern.composite_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 抽象文件类, 充当抽象构件类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/11/2019-1:19 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(AbstractFile file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> FileTreatMentException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>TextFile类 : 文本文件类, 充当叶子构件类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.composite_pattern.composite_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 文本文件类, 充当叶子构件类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/11/2019-1:31 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextFile</span> <span class="keyword">extends</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TextFile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"——————&gt; 对文本文件[ "</span> + name + <span class="string">" ]进行杀毒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>ImageFile类 : 图像文件类, 充当叶子构件类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.composite_pattern.composite_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 图像文件类, 充当叶子构件类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/11/2019-1:27 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageFile</span> <span class="keyword">extends</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageFile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"——————&gt; 对图像文件[ "</span> + name + <span class="string">" ]进行杀毒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Folder类 : 文件夹类, 充当容器构件类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.composite_pattern.composite_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 文件夹类, 充当容器构件类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/11/2019-1:38 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Folder</span> <span class="keyword">extends</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;AbstractFile&gt; directory = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Folder</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(AbstractFile file)</span> </span>&#123;</span><br><span class="line">        directory.add(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"======&gt; 对文件夹[ "</span> + name + <span class="string">" ]进行杀毒"</span>);</span><br><span class="line">        <span class="comment">//递归调用成员构件的killVirus方法</span></span><br><span class="line">        <span class="keyword">for</span> (AbstractFile abstractFile : directory) &#123;</span><br><span class="line">            abstractFile.killVirus();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>FileTreatMentException类 : 自定义异常类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.composite_pattern.composite_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义异常类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/11/2019-12:19 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTreatMentException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileTreatMentException</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileTreatMentException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Client类 : 客户端测试类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.composite_pattern.composite_pattern_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 客户端测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/11/2019-1:44 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractFile folder = <span class="keyword">new</span> Folder(<span class="string">"my-folder"</span>);</span><br><span class="line">        AbstractFile textFolder = <span class="keyword">new</span> Folder(<span class="string">"text-folder"</span>);</span><br><span class="line">        AbstractFile imageFolder = <span class="keyword">new</span> Folder(<span class="string">"image-folder"</span>);</span><br><span class="line">        AbstractFile file = <span class="keyword">new</span> TextFile(<span class="string">"demo.text"</span>);</span><br><span class="line">        AbstractFile image = <span class="keyword">new</span> ImageFile(<span class="string">"demo.jpg"</span>);</span><br><span class="line">        textFolder.add(file);</span><br><span class="line">        imageFolder.add(image);</span><br><span class="line">        folder.add(textFolder);</span><br><span class="line">        folder.add(imageFolder);</span><br><span class="line">        folder.killVirus();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>示例程序的运行结果如下所示 :</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">======&gt; 对文件夹[ my-folder ]进行杀毒</span><br><span class="line">======&gt; 对文件夹[ text-folder ]进行杀毒</span><br><span class="line">——————&gt; 对文本文件[ demo.text ]进行杀毒</span><br><span class="line">======&gt; 对文件夹[ image-folder ]进行杀毒</span><br><span class="line">——————&gt; 对图像文件[ demo.jpg ]进行杀毒</span><br></pre></td></tr></table></figure></li></ol><h4 id="示例程序的类图-1"><a href="#示例程序的类图-1" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/11/Java设计模式之Composite-Pattern/Composite-Pattern-ClassDiagram2.png" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-Java设计模式之Composite-Pattern&quot;&gt;&lt;a href=&quot;#学习笔记-Java设计模式之Composite-Pattern&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : Java设计模式之Composite Patt
      
    
    </summary>
    
    
      <category term="Java" scheme="https://yubuntu0109.github.io/tags/Java/"/>
    
      <category term="design and pattern" scheme="https://yubuntu0109.github.io/tags/design-and-pattern/"/>
    
  </entry>
  
  <entry>
    <title>Java继承与委托中的一致性</title>
    <link href="https://yubuntu0109.github.io/2019/09/09/Java%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%A7%94%E6%89%98%E4%B8%AD%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7/"/>
    <id>https://yubuntu0109.github.io/2019/09/09/Java继承与委托中的一致性/</id>
    <published>2019-09-09T15:17:00.000Z</published>
    <updated>2019-11-17T05:13:30.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-Decorator-Pattern的延伸阅读-继承与委托中的一致性"><a href="#学习笔记-Decorator-Pattern的延伸阅读-继承与委托中的一致性" class="headerlink" title="学习笔记 : Decorator Pattern的延伸阅读-继承与委托中的一致性"></a>学习笔记 : <code>Decorator Pattern</code>的延伸阅读-继承与委托中的一致性</h2><h3 id="继承-父类和子类的一致性"><a href="#继承-父类和子类的一致性" class="headerlink" title="继承-父类和子类的一致性"></a>继承-父类和子类的一致性</h3><p><em>父类和子类具有一致性,示例代码如下所示 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    ···</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">parentMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ···</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    ···</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">childMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ···</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>此时,Child类的实例可以被保存在 Parent 类型中的变量中,所以可以调用从 Parent 类中继承的方法,也就是说,可以像操作 Parent 类的实例一样操作 Child 类的实例. 如下是将子类当做父类看待的示例代码~</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Parent obj = <span class="keyword">new</span> Child();</span><br><span class="line">obj.parentMethod();</span><br></pre></td></tr></table></figure></p><p><em>相反,如果想将父类当做子类一样操作,则需要先进行类型转换哟~</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Parent obj = <span class="keyword">new</span> Child();</span><br><span class="line">((Child)obj).childMethod();</span><br></pre></td></tr></table></figure></p><h3 id="委托-自己和被委托对象的一致性"><a href="#委托-自己和被委托对象的一致性" class="headerlink" title="委托-自己和被委托对象的一致性"></a>委托-自己和被委托对象的一致性</h3><p><em>使用委托让接口具有透明性,自己和被委托对象具有一致性 : 如下示例程序, Rose 和 Violet 都有相同的 method 方法, Rose 将 method 方法的处理委托给了 Violet</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* or interface */</span><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Flower</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rose</span> <span class="keyword">extends</span> <span class="title">Flower</span> </span>&#123;</span><br><span class="line">    Violet obj = ···</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        obj.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Violet</span> <span class="keyword">extends</span> <span class="title">Flower</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ···</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-Decorator-Pattern的延伸阅读-继承与委托中的一致性&quot;&gt;&lt;a href=&quot;#学习笔记-Decorator-Pattern的延伸阅读-继承与委托中的一致性&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : Decorator
      
    
    </summary>
    
    
      <category term="Java" scheme="https://yubuntu0109.github.io/tags/Java/"/>
    
      <category term="design and pattern" scheme="https://yubuntu0109.github.io/tags/design-and-pattern/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式之Decorator Pattern</title>
    <link href="https://yubuntu0109.github.io/2019/09/08/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8BDecorator-Pattern/"/>
    <id>https://yubuntu0109.github.io/2019/09/08/Java设计模式之Decorator-Pattern/</id>
    <published>2019-09-08T21:47:30.000Z</published>
    <updated>2019-11-17T05:13:30.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-Java设计模式之Decorator-Pattern"><a href="#学习笔记-Java设计模式之Decorator-Pattern" class="headerlink" title="学习笔记 : Java设计模式之Decorator Pattern"></a>学习笔记 : Java设计模式之Decorator Pattern</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><em>装饰设计模式( 对象结构型模式 )是一种用于替代继承的技术,它通过一种无须定义子类的方式来给对象动态增加职责,使用对象之间的关联关系取代类之间的继承关系. 装饰设计模式的定位为 : 动态地给一个对象增加一些额外的职责. 就扩展而言,装饰模式提供了一种比使用子类更加灵活的替代方案. ( Decorator Pattern : Attach additonal responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality )</em></p><h3 id="装饰设计模式中的角色"><a href="#装饰设计模式中的角色" class="headerlink" title="装饰设计模式中的角色"></a>装饰设计模式中的角色</h3><ol><li><em><code>Component ( 抽象构件 )</code> : 它是<code>具体构件</code>和<code>抽象装饰类</code>的共同父类,声明了在具体构件中实现的业务方法,它的引入可以使客户端以一致的方式处理未被装饰的对象及装饰之后的对象,实现客户端的透明操作.</em></li><li><em><code>ConcreteComponent ( 具体构件 )</code> : 它是<code>抽象构件类</code>的子类,用于定义具体的构件对象,实现了在抽象构件中声明的方法,装饰类可以给它增加额外的职责( 方法 )</em></li><li><em><code>Decorator ( 抽象装饰类 )</code> : 它也是<code>抽象构件类</code>的子类,用于给<code>具体构件</code>增加职责,但是具体职责在其子类中实现. 它维护一个指向抽象构件的引用,通过该引用可以调用装饰之前构件对象的方法,并通过子类扩展该方法,继而达到装饰的目的.</em></li><li><em><code>ConcreteDecorator ( 具体装饰类 )</code> : 它是<code>抽象装饰类</code>的子类,负责向构件添加新的职责. 每一个具体装饰类都定义了一些新的行为,它可以调用在抽象装饰类中定义的方法,并可以增加新的方法用于扩展对象的行为.</em></li></ol><h3 id="示例程序-透明装饰模式"><a href="#示例程序-透明装饰模式" class="headerlink" title="示例程序-透明装饰模式"></a>示例程序-透明装饰模式</h3><p><em>下面是一个使用了装饰设计模式的简单示例程序,其示例说明为 : 使用面向对象技术开发了一套图形界面构件库,该构件库提供了大量的基本结构,如窗体,文本框,列表框等,由于在使用时用户经常要求定制一些特殊的显示效果,如带滚动条的窗体,或带黑色边框的文本框等. 因此经常需要对该构件库进行扩展以增强其功能,既而可以使用装饰设计模式来设计该界面构件库哟~</em></p><ol><li><p><em>Component接口 : 抽象界面构件类, 充当抽象构件类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.decorator_pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 抽象界面构件类, 充当抽象构件类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/9/2019-2:47 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Window类 : 窗体类, 充当具体构件类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.decorator_pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 窗体类, 充当具体构件类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/9/2019-2:48 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"显示窗体 !"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>TextBox类 : 文本框类, 充当具体构件类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.decorator_pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 文本框类, 充当具体构件类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/9/2019-2:50 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextBox</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"显示文本框 !"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>ListBox类 : 列表框类, 充当具体构件类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.decorator_pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 列表框类, 充当具体构件类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/9/2019-2:51 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListBox</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"显示列表框 !"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>ComponentDecorator类 : 构件装饰类, 充当抽象装饰类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.decorator_pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 构件装饰类, 充当抽象装饰类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/9/2019-2:52 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComponentDecorator</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//维持对抽象构件类型对象的引用</span></span><br><span class="line">    <span class="keyword">private</span> Component component;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入抽象构件类型的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComponentDecorator</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.component = component;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        component.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>ScrollBarDecorator类 : 滚动条装饰类, 充当具体装饰类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.decorator_pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 滚动条装饰类, 充当具体装饰类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/9/2019-2:54 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollBarDecorator</span> <span class="keyword">extends</span> <span class="title">ComponentDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScrollBarDecorator</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setScrollBar();</span><br><span class="line">        <span class="keyword">super</span>.display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setScrollBar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"为构件添加滚动条 !"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>BlackBorderDecorator类 : 黑色边框装饰类, 充当具体装饰类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.decorator_pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 黑色边框装饰类, 充当具体装饰类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/9/2019-2:59 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackBorderDecorator</span> <span class="keyword">extends</span> <span class="title">ComponentDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlackBorderDecorator</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setBlackBorder();</span><br><span class="line">        <span class="keyword">super</span>.display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setBlackBorder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"为构件添加黑色边框 !"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Client类 : 客户端测试类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.decorator_pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 客户端测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/9/2019-3:03 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Component component = <span class="keyword">new</span> Window();</span><br><span class="line">        component.display();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"------------------"</span>);</span><br><span class="line"></span><br><span class="line">        Component component2 = <span class="keyword">new</span> ScrollBarDecorator(component);</span><br><span class="line">        component2.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/08/Java设计模式之Decorator-Pattern/Decorator-Pattern-ClassDiagram.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="示例程序-半透明装饰模式"><a href="#示例程序-半透明装饰模式" class="headerlink" title="示例程序-半透明装饰模式"></a>示例程序-半透明装饰模式</h3><p><em>暂略 · · ·</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-Java设计模式之Decorator-Pattern&quot;&gt;&lt;a href=&quot;#学习笔记-Java设计模式之Decorator-Pattern&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : Java设计模式之Decorator Patt
      
    
    </summary>
    
    
      <category term="Java" scheme="https://yubuntu0109.github.io/tags/Java/"/>
    
      <category term="design and pattern" scheme="https://yubuntu0109.github.io/tags/design-and-pattern/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式之Abstract Factory Pattern</title>
    <link href="https://yubuntu0109.github.io/2019/09/07/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8BAbstract-Factory-Pattern/"/>
    <id>https://yubuntu0109.github.io/2019/09/07/Java设计模式之Abstract-Factory-Pattern/</id>
    <published>2019-09-07T21:56:25.000Z</published>
    <updated>2019-11-17T05:13:30.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-Java设计模式之Abstract-Factory-Pattern"><a href="#学习笔记-Java设计模式之Abstract-Factory-Pattern" class="headerlink" title="学习笔记 : Java设计模式之Abstract Factory Pattern"></a>学习笔记 : Java设计模式之Abstract Factory Pattern</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><em><code>工厂方法模式</code>通过引入工厂等级结构解决了<code>简单工厂模式</code>中工厂类职责太重的问题,但由于工厂方法模式中每个具体工厂只有一个或一组重载的工厂方法,既只能生产一种产品,可能会导致系统中存在大量的工厂类,势必会增加系统的开销. 抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形式. 抽象工厂模式与工厂方法模式的最大区别在于 : 工厂方法模式针对的是一个<code>产品等级结构</code>,而抽象工厂模式需要面对多个产品等级结构,一个工厂等级结构可以负责多个不同产品等级结构中的产品对象的创建. 当一个工厂等级结构可以创建出分属于不同产品等级结构的一个产品族中的所有对象时,抽象工厂模式比工厂方法模式更加简单,更有效率~ 抽象工厂模式的定义为 : 提供一个创建一系列相关或相互依赖对象的接口,而无须指定它们具体的类( Abstract Factory Pattern : Provide an interface for creating families of related or dependent objects without sprcifying their concrete classes. )</em></p><h3 id="抽象工厂模式中的角色"><a href="#抽象工厂模式中的角色" class="headerlink" title="抽象工厂模式中的角色"></a>抽象工厂模式中的角色</h3><ol><li><em><code>AbstractFactory( 抽象工厂 )</code> : 它声明了一组用于创建一族产品的方法,每一个方法对应一种产品.</em></li><li><em><code>ConcreteFactory( 具体工厂 )</code> : 它实现了在抽象工厂中声明的创建产品的方法,生成一组具体产品,这些产品构成了一个<code>产品族</code>,每一个产品都位于某个产品等级结构中</em></li><li><em><code>AbstractProduct( 抽象产品 )</code> : 它为每种产品声明接口,在抽象产品中声明了产品所具有的业务方法.</em></li><li><em><code>ConcreteProduct( 具体产品 )</code> : 它定义具体工厂生产的具体产品对象,实现抽象产品接口中声明的业务方法.</em></li></ol><h3 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h3><p><em>下面是一个使用了抽象工厂模式的简单示例程序,其程序功能( 模拟 )描述为 : 开发一套基于 Java 桌面软件的界面皮肤库,用户可以自由切换界面皮肤,例如有 Spring 与 Summer 风格等皮肤~</em></p><ol><li><p><em>Button接口 : 接口按钮, 充当抽象产品</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.abstract_factory_pattern.abstract_factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 接口按钮, 充当抽象产品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/7/2019-5:18 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Button</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>SpringButton类 : Spring风格皮肤的按钮类, 充当具体产品</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.abstract_factory_pattern.abstract_factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Spring风格皮肤的按钮类, 充当具体产品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/7/2019-5:19 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringButton</span> <span class="keyword">implements</span> <span class="title">Button</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"spring theme———&gt;this is button"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>SummerButton类 : Summer风格皮肤的按钮类, 充当具体产品</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.abstract_factory_pattern.abstract_factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Summer风格皮肤的按钮类, 充当具体产品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/7/2019-5:20 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SummerButton</span> <span class="keyword">implements</span> <span class="title">Button</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Summer theme———&gt;button"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>TextField接口 : 文本框接口, 充当抽象产品</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.abstract_factory_pattern.abstract_factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 文本框接口, 充当抽象产品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/7/2019-5:22 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TextField</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>SpringTextField类 : Spring风格皮肤的文本框类, 充当具体产品</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.abstract_factory_pattern.abstract_factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Spring风格皮肤的文本框类, 充当具体产品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/7/2019-5:22 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTextField</span> <span class="keyword">implements</span> <span class="title">TextField</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Spring theme———&gt;this is text field"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>SummerTextField类 : Summer风格皮肤的文本框类, 充当具体产品</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.abstract_factory_pattern.abstract_factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Summer风格皮肤的文本框类, 充当具体产品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/7/2019-5:23 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SummerTextField</span> <span class="keyword">implements</span> <span class="title">TextField</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Summer theme———&gt;this is text field"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>ComboBob类 : 组合框接口, 充当抽象产品</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.abstract_factory_pattern.abstract_factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 组合框接口, 充当抽象产品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/7/2019-5:24 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ComboBox</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>SpringComboBox类 : Spring风格皮肤的组合框类, 充当具体产品</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.abstract_factory_pattern.abstract_factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Spring风格皮肤的组合框类, 充当具体产品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/7/2019-5:25 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringComboBox</span> <span class="keyword">implements</span> <span class="title">ComboBox</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Spring theme———&gt;this is comboxBox"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>SummerComboBox类 : Summer风格皮肤的组合框类, 充当具体产品</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.abstract_factory_pattern.abstract_factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Summer风格皮肤的组合框类, 充当具体产品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/7/2019-5:25 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SummerComboBox</span> <span class="keyword">implements</span> <span class="title">ComboBox</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Summer theme———&gt;this is comboBox"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>SkinFactory接口 : 界面皮肤工厂接口, 充当抽象工厂</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.abstract_factory_pattern.abstract_factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 界面皮肤工厂接口, 充当抽象工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/7/2019-5:26 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SkinFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Button <span class="title">createButton</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TextField <span class="title">createTextField</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ComboBox <span class="title">createComboBox</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>SpringSkinFactory类 : Spring皮肤风格的工厂类, 充当具体工厂</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.abstract_factory_pattern.abstract_factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Spring皮肤风格的工厂类, 充当具体工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/7/2019-5:29 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSkinFactory</span> <span class="keyword">implements</span> <span class="title">SkinFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Button <span class="title">createButton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringButton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TextField <span class="title">createTextField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringTextField();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ComboBox <span class="title">createComboBox</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringComboBox();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>SummerSkinFactory类 : Summer风格皮肤的工厂类, 充当具体工厂</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.abstract_factory_pattern.abstract_factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Summer风格皮肤的工厂类, 充当具体工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/7/2019-5:33 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SummerSkinFactory</span> <span class="keyword">implements</span> <span class="title">SkinFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Button <span class="title">createButton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SummerButton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TextField <span class="title">createTextField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SummerTextField();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ComboBox <span class="title">createComboBox</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SummerComboBox();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Client类 : 客户端测试类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.abstract_factory_pattern.abstract_factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 客户端测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/7/2019-5:30 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SkinFactory skinFactory = <span class="keyword">new</span> SpringSkinFactory();</span><br><span class="line">        skinFactory.createButton().display();</span><br><span class="line">        skinFactory.createTextField().display();</span><br><span class="line">        skinFactory.createComboBox().display();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"———————————————————"</span>);</span><br><span class="line"></span><br><span class="line">        SkinFactory skinFactory2 = <span class="keyword">new</span> SummerSkinFactory();</span><br><span class="line">        skinFactory2.createButton().display();</span><br><span class="line">        skinFactory2.createTextField().display();</span><br><span class="line">        skinFactory2.createComboBox().display();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>程序运行结果如下所示 :</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring theme———&gt;this is button</span><br><span class="line">Spring theme———&gt;this is text field</span><br><span class="line">Spring theme———&gt;this is comboxBox</span><br><span class="line">———————————————————</span><br><span class="line">Summer theme———&gt;button</span><br><span class="line">Summer theme———&gt;this is text field</span><br><span class="line">Summer theme———&gt;this is comboBox</span><br></pre></td></tr></table></figure></li></ol><h4 id="示例程序的类图"><a href="#示例程序的类图" class="headerlink" title="示例程序的类图"></a>示例程序的类图</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/07/Java设计模式之Abstract-Factory-Pattern/Abstract-Factory-Pattern-ClassDiagram.png" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-Java设计模式之Abstract-Factory-Pattern&quot;&gt;&lt;a href=&quot;#学习笔记-Java设计模式之Abstract-Factory-Pattern&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : Java设计模式之
      
    
    </summary>
    
    
      <category term="Java" scheme="https://yubuntu0109.github.io/tags/Java/"/>
    
      <category term="design and pattern" scheme="https://yubuntu0109.github.io/tags/design-and-pattern/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式之Singleton Pattern</title>
    <link href="https://yubuntu0109.github.io/2019/09/06/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8BSingleton-Pattern/"/>
    <id>https://yubuntu0109.github.io/2019/09/06/Java设计模式之Singleton-Pattern/</id>
    <published>2019-09-06T13:32:05.000Z</published>
    <updated>2019-11-17T05:13:30.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记-Java设计模式之Singleton-Pattern"><a href="#学习笔记-Java设计模式之Singleton-Pattern" class="headerlink" title="学习笔记 : Java设计模式之Singleton Pattern"></a>学习笔记 : Java设计模式之Singleton Pattern</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><em>单例设计模式 : 确保一个类只能有一个实例,并提供一个全局访问点来访问这个实例. (Singleton Pattern : Ensure a class has only one intance,and provide a global point of access to it. ). 单例设计模式是一种对象创建型模式,其主要有三个要点 :</em></p><ol><li><em>某个类只能有一个实例</em></li><li><em>必须自行创建这个实例</em></li><li><em>必须自行向系统提供这个实例</em></li></ol><h3 id="示例程序-饿汉式单例"><a href="#示例程序-饿汉式单例" class="headerlink" title="示例程序-饿汉式单例"></a>示例程序-饿汉式单例</h3><p><em>饿汉式单例类( Eager Singleton )是最简单的单例类,既类被加载时静态变量 instance 就会被初始化,程序示例如下所示 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.singleton_pattern.eager_singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 单例模式-饿汉式单例类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/6/2019-10:44 AM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EagerSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> EagerSingleton instance = <span class="keyword">new</span> EagerSingleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EagerSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EagerSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>注 : 从资源利用效率的角度来讲饿汉式单例不及懒汉式单例,而且系统加载时由于需要创建饿汉式单例对象,加载时间可能比较长.</em></p><h3 id="程序示例-懒汉式单例"><a href="#程序示例-懒汉式单例" class="headerlink" title="程序示例-懒汉式单例"></a>程序示例-懒汉式单例</h3><p><em>与饿汉式单例不同的是,懒汉式单例类( Lazy Singleton )在第一次被引用时才会将自己实例化,当单例类被加载时并不会将自己实例化, 示例程序如下所示 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.singleton_pattern.lazy_singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 单例模式-懒汉式单例类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/6/2019-10:50 AM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被volatile修饰的成员变量可以确保多个线程都能够正确处理</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazySingleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第一重判断</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//锁定代码块:确保任何时刻只有一个线程可执行此代码块</span></span><br><span class="line">            <span class="keyword">synchronized</span> (LazySingleton.class) &#123;</span><br><span class="line">                <span class="comment">//第二重判断:防止产生多个单例对象</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> LazySingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>注 : 由于<code>volatile</code>关键字会屏蔽Java虚拟机所做的一切代码优化,继而可能会导致系统的运行效率降低,因此即使使用双重检查锁定来实现单例模式也不是一种完美的实现方法哟~</em></p><h3 id="示例程序-内部类实现单例"><a href="#示例程序-内部类实现单例" class="headerlink" title="示例程序-内部类实现单例"></a>示例程序-内部类实现单例</h3><p><em>饿汉式单例不能实现延迟加载,不管将来用不用始终占据内存. 懒汉式单例类线程安全控制繁琐,而且性能受影响. 为了克服这些问题,在Java语言中可以通过使用 Initialization on Demand Holder( <code>IoDH</code> )技术来实现单例模式,示例程序如下所示 :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.huangyuhui.singleton_pattern.IoDH_singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span>: design-patterns</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 单例模式-内部类实现单例类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 黄宇辉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 9/6/2019-11:11 AM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://yubuntu0109.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HolderClass</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HolderClass.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>注 : 通过使用<code>IoDH</code>既可以实现延迟加载,又可以保证线程安全,不影响系统性能,既其为一种最好的Java语言单例模式实现方式,其缺点为很多面向对象语言并不支持IoDH哟~</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习笔记-Java设计模式之Singleton-Pattern&quot;&gt;&lt;a href=&quot;#学习笔记-Java设计模式之Singleton-Pattern&quot; class=&quot;headerlink&quot; title=&quot;学习笔记 : Java设计模式之Singleton Patt
      
    
    </summary>
    
    
      <category term="Java" scheme="https://yubuntu0109.github.io/tags/Java/"/>
    
      <category term="design and pattern" scheme="https://yubuntu0109.github.io/tags/design-and-pattern/"/>
    
  </entry>
  
</feed>
